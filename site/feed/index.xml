<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"> 
  <id>http://loopinfinito.com.br/</id>
  <title>Loop Infinito</title>
  <icon>http://loopinfinito.com.br/images/favicon.png</icon>
  <updated>2012-06-09T21:17:54-03:00</updated>
  <link rel="self" href="http://loopinfinito.com.br/feed/index.xml" />
  <link href="http://loopinfinito.com.br/" />
  
  <entry>
    <id>http://loopinfinito.com.br/2012/06/04/expressoes-matematicas-em-css-com-calc</id>
    <title>Expressões matemáticas em CSS com calc()</title>
    <updated>2012-06-04T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/06/04/expressoes-matematicas-em-css-com-calc/" />
    <author>
      <name>Almir Filho</name>
    </author>
    <content type="html">&lt;script type='text/javascript'&gt;
$(document).ready( function(){
	$('#btn').click( function(){
		$('.input').each( function( i, e ){
			var a = $(e).attr('data-attr');
			var val = $(e).val();
			$('#acdc').css( a, '-webkit-calc('+val+')' ).css( a, '-moz-calc('+val+')' ).css( a, '-ms-calc('+val+')' ).css( a, '-o-calc('+val+')' ).css( a, 'calc('+val+')' );
		});
	});
});
&lt;/script&gt;&lt;style type='text/css'&gt;

#stage {
	width: 700px;
	height: 432px;
	overflow: hidden;
	background-color:#333;
	background-image: -webkit-linear-gradient(white 2px, transparent 2px),
	  -webkit-linear-gradient(0, white 2px, transparent 2px),
	  -webkit-linear-gradient(rgba(255,255,255,.3) 1px, transparent 1px),
	  -webkit-linear-gradient(0, rgba(255,255,255,.3) 1px, transparent 1px);
	background-image: -moz-linear-gradient(white 2px, transparent 2px),
	  -moz-linear-gradient(0, white 2px, transparent 2px),
	  -moz-linear-gradient(rgba(255,255,255,.3) 1px, transparent 1px),
	  -moz-linear-gradient(0, rgba(255,255,255,.3) 1px, transparent 1px);
	background-image: -ms-linear-gradient(white 2px, transparent 2px),
	  -ms-linear-gradient(0, white 2px, transparent 2px),
	  -ms-linear-gradient(rgba(255,255,255,.3) 1px, transparent 1px),
	  -ms-linear-gradient(0, rgba(255,255,255,.3) 1px, transparent 1px);
	background-image: -o-linear-gradient(white 2px, transparent 2px),
	  -o-linear-gradient(0, white 2px, transparent 2px),
	  -o-linear-gradient(rgba(255,255,255,.3) 1px, transparent 1px),
	  -o-linear-gradient(0, rgba(255,255,255,.3) 1px, transparent 1px);
	background-image: linear-gradient(white 2px, transparent 2px),
	  linear-gradient(0, white 2px, transparent 2px),
	  linear-gradient(rgba(255,255,255,.3) 1px, transparent 1px),
	  linear-gradient(0, rgba(255,255,255,.3) 1px, transparent 1px);
	background-size:100px 100px, 100px 100px, 20px 20px, 20px 20px;
	background-position:-2px -2px, -2px -2px, -1px -1px, -1px -1px
}

#content .post-container article section img#acdc {
	width: auto;
	height: auto;
	background: none !important;
	position: relative;
	left: 0px;
	left: -webkit-calc(50% - 175px);
	left: -moz-calc(50% - 175px);
	left: -ms-calc(50% - 175px);
	left: -o-calc(50% - 175px);
	left: calc(50% - 175px);
	top: -webkit-calc(50% - 75px);
	top: -moz-calc(50% - 75px);
	top: -ms-calc(50% - 75px);
	top: -o-calc(50% - 75px);
	top: calc(50% - 75px);
}

#btn {
	padding: 0px 5px;
}

#experiment {
	padding-bottom: 0px !important;
}

	#experiment input.input {
		width: 120px;
	}

	#experiment table {
		text-align: left;
		border-collapse: collapse;
		border-spacing: 0px;
		margin-top: 20px;
		line-height: 120% !important;
	}

		#experiment table td {
			padding: 2px;
		}

&lt;/style&gt;&lt;p&gt;&lt;img alt='Expressões matemáticas em CSS com calc()' height='432' src='http://loopinfinito.com.br/images/posts/2012-06-04-isaac-newton.jpg' title='Isaac Newton' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Um novo recurso bastante interessante do CSS3 é a função &lt;code&gt;calc()&lt;/code&gt;. Com esta função agora é possível calcularmos valores de &lt;strong&gt;expressões matemáticas&lt;/strong&gt; diretamente no CSS! &lt;em&gt;Like a rockstar coder&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Em CSS, sabemos que existem diversos tipos de valores e medidas: &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;mm&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt; e &lt;code&gt;ex&lt;/code&gt;. Se quisermos atribuir qualquer valor numérico a uma determinada propriedade, apenas escolhemos uma destas unidades:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#acdc&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Contudo, em CSS &lt;strong&gt;não&lt;/strong&gt; é permitido fazer isto:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#acdc&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100px&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='m'&gt;10px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* incorreto */&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Ou seja, não é possível calcular nenhuma expressão matemática – mesmo que seja uma coisa totalmente desnecessária e tosca como o exemplo acima. E desculpem-me por isto, no próximo melhora.&lt;/p&gt;

&lt;h2 id='um_exemplo_decente'&gt;Um exemplo decente&lt;/h2&gt;

&lt;p&gt;Acho que boa parte das pessoas que trabalham com CSS já se depararam com o seguinte problema: precisar apenas centralizar um elemento na tela. Isto é, independente da resolução que o cidadão esteja usando, o elemento terá que ficar centralizado. Dai você pensa, &lt;em&gt;&amp;#8220;p!@# q%$ p%$!# como é que vou fazer esta m!@#$ funcionar?&amp;#8221;&lt;/em&gt;. E &lt;strong&gt;sem trapacear com JS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;span style='text-decoration:line-through;'&gt;gambiarra&lt;/span&gt; solução para este pequeno impasse é bem simples, na verdade:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#pinkfloyd&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;200px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;150px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;absolute&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;left&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;margin-top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-75px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* metade da altura */&lt;/span&gt;
    &lt;span class='k'&gt;margin-left&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-100px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* metade da largura */&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hora do purismo: Ter que resolver um problema de posição de um elemento usando &lt;code&gt;margin&lt;/code&gt; é &lt;strong&gt;toscasso&lt;/strong&gt;! Se já existem as propriedades &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; e &lt;code&gt;bottom&lt;/code&gt;, isto deveria ser mais que suficiente, mas pela limitação do CSS de não permitir expressões matemáticas, infelizmente não poderíamos simplesmente fazer: &lt;code&gt;top: 50% - 75px&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='resolvendo_a_bronca_da_maneira_correta'&gt;Resolvendo a bronca da maneira correta&lt;/h2&gt;

&lt;p&gt;Não seria legal se a expressão acima (&lt;code&gt;top: 50% - 75px&lt;/code&gt;) funcionasse logo de cara, sem frescura? Pois é, por isso apresentamos&amp;#8230; &lt;code&gt;calc()&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Com &lt;code&gt;calc()&lt;/code&gt; poderemos calcular expressões matemáticas &lt;strong&gt;simples&lt;/strong&gt; de boa. Quando digo &lt;em&gt;simples&lt;/em&gt; quer dizer apenas que não dá pra sair calculando integrais e diabo a quatro, os operadores suportados por &lt;code&gt;calc()&lt;/code&gt; são apenas os básicos – &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; e &lt;code&gt;/&lt;/code&gt; – e também podemos usar parênteses – &lt;code&gt;(&lt;/code&gt; e &lt;code&gt;)&lt;/code&gt;. Mais do que o suficiente por hora.&lt;/p&gt;

&lt;p&gt;O mais interessante é que podemos &lt;em&gt;misturar&lt;/em&gt; valores relativos com valores absolutos, e valores de &lt;em&gt;diferentes unidades&lt;/em&gt;. &lt;code&gt;calc()&lt;/code&gt; automaticamente converte as diferentes unidades e calcula valores relativos (como &lt;code&gt;%&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id='misturando_valores_relativos_e_absolutos'&gt;Misturando valores relativos e absolutos&lt;/h3&gt;

&lt;p&gt;O exemplo anterior ficaria:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#pinkfloyd&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;200px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;150px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;absolute&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='c'&gt;/* top: 50%; */&lt;/span&gt;
    &lt;span class='c'&gt;/* margin-top: -75px; */&lt;/span&gt;
    &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;calc&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='m'&gt;75px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='c'&gt;/* left: 50%; */&lt;/span&gt;
    &lt;span class='c'&gt;/* margin-left: -100px; */&lt;/span&gt;
    &lt;span class='k'&gt;left&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;calc&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='m'&gt;100px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='misturando_unidades'&gt;Misturando unidades&lt;/h3&gt;

&lt;p&gt;Também é possível usar valores de unidades diferentes numa mesma expressão:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#ledzeppelin&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;calc&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;100px&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='m'&gt;2in&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='m'&gt;5em&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;min-height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;calc&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;5em&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='m'&gt;30px&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='m'&gt;25&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='m'&gt;3.5pc&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='suporte'&gt;Suporte&lt;/h2&gt;

&lt;p&gt;No momento em que escrevo este post, os únicos navegadores que estão dando suporte a esta propriedade são o &lt;strong&gt;Google Chrome v.19&lt;/strong&gt; (o mais novo) através da propriedade prefixada &lt;code&gt;-webkit-calc()&lt;/code&gt; e o &lt;strong&gt;Mozilla Firefox&lt;/strong&gt;, que já dá suporte desde sua versão 8 através da propriedade prefixada &lt;code&gt;-moz-calc()&lt;/code&gt;. O &lt;strong&gt;Internet Explorer 9&lt;/strong&gt; e o &lt;strong&gt;Webkit Nightly Build&lt;/strong&gt; são os únicos que dão suporte completo até o momento (&lt;code&gt;calc()&lt;/code&gt;). Já o &lt;em&gt;Opera&lt;/em&gt;, o &lt;em&gt;Safari&lt;/em&gt; ainda não estão dando suporte algum.&lt;/p&gt;

&lt;h2 id='se_vira_nos_30'&gt;Se vira nos 30&lt;/h2&gt;

&lt;p&gt;Agora é a sua vez =). Fiz este pequeno experimento abaixo onde é possível entrar com os valores de cada propriedade e visualizar o resultado.&lt;/p&gt;
&lt;section id='experiment'&gt;
	&lt;div class='img' id='stage'&gt;
		&lt;img alt='AC/DC' id='acdc' src='http://loopinfinito.com.br/images/posts/2012-06-04-acdc.png' title='there&amp;apos;s a long way to the top if you wanna rock n&amp;apos; roll' /&gt;
	&lt;/div&gt;
	&lt;table&gt;
		&lt;thead&gt;
			&lt;th&gt;&lt;label for='input-top'&gt;&lt;code&gt;top&lt;/code&gt;&lt;/label&gt;&lt;/th&gt;
			&lt;th&gt;&lt;label for='input-left'&gt;&lt;code&gt;left&lt;/code&gt;&lt;/label&gt;&lt;/th&gt;
			&lt;th&gt;&lt;label for='input-width'&gt;&lt;code&gt;width&lt;/code&gt;&lt;/label&gt;&lt;/th&gt;
			&lt;th&gt;&lt;label for='input-height'&gt;&lt;code&gt;height&lt;/code&gt;&lt;/label&gt;&lt;/th&gt;
			&lt;th /&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;td&gt;&lt;input class='input' data-attr='top' id='input-top' placeholder='top' value='50% - 75px' /&gt;&lt;/td&gt;
			&lt;td&gt;&lt;input class='input' data-attr='left' id='input-left' placeholder='left' value='50% - 175px' /&gt;&lt;/td&gt;
			&lt;td&gt;&lt;input class='input' data-attr='width' id='input-width' placeholder='width' value='350px' /&gt;&lt;/td&gt;
			&lt;td&gt;&lt;input class='input' data-attr='height' id='input-height' placeholder='height' value='150px' /&gt;&lt;/td&gt;
			&lt;td&gt;&lt;input id='btn' type='button' value='Atualizar' /&gt;&lt;/td&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/section&gt;
&lt;p&gt;&lt;strong&gt;OBS.:&lt;/strong&gt; Se alguma expressão matemática que você digitar não surtir efeito, é porque deve estar incorreta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dica 1:&lt;/strong&gt; sempre especifique uma unidade. Ex.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INCORRETO: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;CORRETO: &lt;code&gt;0px&lt;/code&gt;, &lt;code&gt;0em&lt;/code&gt; ou &lt;code&gt;0%&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dica 2:&lt;/strong&gt; para soma (&lt;code&gt;+&lt;/code&gt;) e subtração (&lt;code&gt;-&lt;/code&gt;), sempre deixe espaço entre os elementos da expressão. Ex.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INCORRETO: &lt;code&gt;10px+30%&lt;/code&gt;, &lt;code&gt;10px +10%&lt;/code&gt; etc.&lt;/li&gt;

&lt;li&gt;CORRETO: &lt;code&gt;10px + 30%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#8217;s all folks!&lt;/p&gt;
&lt;aside class='fonte'&gt;
  &lt;h3&gt;Referência&lt;/h3&gt;
  &lt;ul&gt;    
    &lt;li&gt;→&lt;a alt='CSS Values and Units Module Level 3' href='http://www.w3.org/TR/css3-values/#calc' title='CSS Values and Units Module Level 3'&gt;CSS Values and Units Module Level 3&lt;/a&gt; &lt;span class='comment'&gt;// W3C&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;→&lt;a alt='CSS Units' href='http://www.w3schools.com/cssref/css_units.asp' title='CSS Units'&gt;CSS Units&lt;/a&gt; &lt;span class='comment'&gt;// W3 Schools&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;→&lt;a alt='CSS LAYOUT GETS SMARTER WITH CALC()' href='http://updates.html5rocks.com/2012/03/CSS-layout-gets-smarter-with-calc' title='CSS LAYOUT GETS SMARTER WITH CALC()'&gt;CSS LAYOUT GETS SMARTER WITH CALC()&lt;/a&gt; &lt;span class='comment'&gt;// HTML5 Rocks&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/05/27/automatizando-o-deploy-com-rsync</id>
    <title>Automatizando o deploy com rsync</title>
    <updated>2012-05-27T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/05/27/automatizando-o-deploy-com-rsync/" />
    <author>
      <name>Caio Gondim</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt='Automatizando o deploy com rsync' height='432' src='http://loopinfinito.com.br/images/posts/2012-05-27-automatizando-deploy-com-rsync.jpg' width='700' /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Você sempre esquece de upar um arquivo para o servidor de produção?&lt;/li&gt;

&lt;li&gt;Acha um saco ter que upar os arquivos um a um?&lt;/li&gt;

&lt;li&gt;Acha o FTP lento?&lt;/li&gt;

&lt;li&gt;Se sente inseguro tendo que compartilhar a senha do server com outros?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então&amp;#8230;&lt;/p&gt;

&lt;h2 id='seus_problemas_se_acabaramse'&gt;Seus problemas se acabaram-se&lt;/h2&gt;

&lt;p&gt;O rsync é uma ferramenta para sincronização de arquivos/pastas que se encaixa como uma luva para a tarefa de deploy (enviar os arquivos modificados para uma outra máquina).&lt;/p&gt;

&lt;p&gt;Caso você esteja usando uma máquina Unix-like (Mac, Linux, BSD, &amp;#8230;) você provavelmente já possui o rsync instalado. Caso esteja utilizando o Windows, você pode baixar um port do projeto para sua plataforma &lt;a href='http://rsync.samba.org/download.html'&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Este post é o primeiro do Loop Infinito a ser upado com o rsync. Vamos então dar uma estudada em como o processo é feito por aqui para aprendermos um pouco mais sobre a ferramenta.&lt;/p&gt;

&lt;h2 id='ligando_agora_voc_recebe'&gt;Ligando agora você recebe&amp;#8230;&lt;/h2&gt;

&lt;p&gt;O rsync é uma ferramenta que roda no terminal. Nós apenas definimos a pasta/arquivo origem e a pasta/arquivo destino que deve ser sincronizado com a origem. Ele então verifica quais arquivos foram modificados entre a origem e o destino e envia apenas o delta (a diferença) entre as diferentes versões do mesmo arquivo, o que torna o processo bem mais rápido se comparado ao FTP.&lt;/p&gt;

&lt;p&gt;O uso mais básico para o rsync seria o de deixarmos duas pastas na mesma máquina sincronizadas. Basta executarmos o rsync pela linha de comando, passando a pasta origem como primeiro argumento e a pasta destino como segundo argumento.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rsync ~/uma/pasta/origem/qualquer ~/outra/pasta/destino
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Mas no nosso caso queremos sincronizar uma pasta em nossa máquina com uma outra em uma máquina remota (o servidor do nosso blog). Então o comando usado foi:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rsync -avz -e ssh ./site loopinfinito@bugsy.dreamhost.com:~/loopinfinito.com.br
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Calma&lt;/strong&gt;! Não se apavore (ainda).&lt;/p&gt;

&lt;p&gt;O nosso comando de deploy segue o mesmo princípio do exemplo mais básico que demos logo acima: o de deixar duas pasta sincronizadas. A diferença aqui é que estamos deixando duas pastas sincronizadas em diferentes máquinas. Parece complicado, mas vamos quebrar o comando acima e entendê-lo por completo. &lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; archive mode. esta flag habilita o modo recursivo e preserva links simbólicos, permissões e timestamps&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; verbose. nos dá mais feedback sobre o que está acontecendo&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-z&lt;/code&gt; habilita compressão de dados durante o envio&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e ssh&lt;/code&gt; especifica o shell remoto, no caso estamos usando SSH&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;./site&lt;/code&gt; pasta origem &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;loopinfinito@bugsy.dreamhost.com:~/loopinfinito.com.br&lt;/code&gt; destino que queremos deixar sincronizado com a origem&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Vamos quebrar o último comando para entendermos como estamos nos conectando no servidor. &lt;ul&gt;
  &lt;li&gt;&lt;code&gt;loopinfinito&lt;/code&gt; nome de usuário na máquina que estamos nos conectando&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bugsy.dreamhost.com&lt;/code&gt; endereço do server&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;~/loopinfinito.com.br&lt;/code&gt; pasta dentro do server que queremos deixar sincronizada com a pasta local&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Com apenas este comando nós estamos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Atualizando o nosso server com todos os arquivos novos, sem a necessidade de escolher arquivos manualmente&lt;/li&gt;

&lt;li&gt;Conexão segura, já que estamos usando SSH&lt;/li&gt;

&lt;li&gt;Mais rápido que FTP, já que usamos apenas uma conexão e enviamos apenas o delta de cada arquivo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perceberam também que não estamos utilizando senha para nos conectarmos? Isso porque com o SSH nós apenas upamos as nossas chaves públicas para o servidor. Para quem quisermos dar acesso ao server, basta colar a chave pública no arquivo &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; no servidor (no nosso caso específico) e a conexão para esta pessoa com esta chave é liberada. E para revogar o acesso também é muito fácil, é só retirar a chave pública do mesmo arquivo, sem a necessidade de mudar de senha e reenviar a senha para todas as pessoas do projeto.&lt;/p&gt;

&lt;h2 id='e_no__s_isso'&gt;E não é só isso&lt;/h2&gt;

&lt;p&gt;Seria um saco termos que sempre digitar esse comando gigante quando fossemos dar um deploy. Para isso nós criamos uma tarefa com o &lt;code&gt;cake&lt;/code&gt;, um sistema de build do CoffeeScript (nós amamos CoffeeScript) parecido com o rake (de Ruby) e make (de C).&lt;/p&gt;

&lt;p&gt;É só criar um arquivo chamado Cakefile na raiz do projeto e por este trecho de código:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='coffeescript'&gt;&lt;span class='c1'&gt;# módulos&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;spawn&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;exec&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;child_process&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;# task &amp;#39;deploy&amp;#39;&lt;/span&gt;
&lt;span class='nx'&gt;task&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;deploy&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;Envia o diff do blog para o server&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nf'&gt;() -&amp;gt;&lt;/span&gt;

  &lt;span class='c1'&gt;# configurações de deploy do rsync&lt;/span&gt;
  &lt;span class='c1'&gt;# para poder dar o deploy com sucesso, é necessário que sua chave pública &lt;/span&gt;
  &lt;span class='c1'&gt;# esteja no arquivo ~/.ssh/authorized_keys do servidor&lt;/span&gt;
  &lt;span class='nv'&gt;user = &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;caiogondim&amp;quot;&lt;/span&gt;
  &lt;span class='nv'&gt;remote_root = &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;~/tmp.caiogondim.com&amp;quot;&lt;/span&gt;
  &lt;span class='nv'&gt;local_root = &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;site/&amp;quot;&lt;/span&gt;

  &lt;span class='c1'&gt;# executa o deploy&lt;/span&gt;
  &lt;span class='nv'&gt;rsync = &lt;/span&gt;&lt;span class='nx'&gt;spawn&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;rsync&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;-avz&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;-e&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;ssh&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nx'&gt;__dirname&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s'&gt;/&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nx'&gt;local_root&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nx'&gt;user&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s'&gt;@bugsy.dreamhost.com:&lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nx'&gt;remote_root&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;
  &lt;span class='p'&gt;]&lt;/span&gt;

  &lt;span class='c1'&gt;# evento disparado quando a tarefa imprime algo no stdout&lt;/span&gt;
  &lt;span class='nx'&gt;rsync&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stdout&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='kc'&gt;on&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nf'&gt;(data) -&amp;gt;&lt;/span&gt;
    &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;toString&lt;/span&gt;&lt;span class='p'&gt;().&lt;/span&gt;&lt;span class='nx'&gt;trim&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

  &lt;span class='c1'&gt;# evento disparado caso ocorra um erro na tarefa&lt;/span&gt;
  &lt;span class='nx'&gt;rsync&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stderr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='kc'&gt;on&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nf'&gt;(data) -&amp;gt;&lt;/span&gt;
    &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Erro no deploy: &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;

  &lt;span class='c1'&gt;# evento disparado quando a tarefa é terminada&lt;/span&gt;
  &lt;span class='nx'&gt;rsync&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='kc'&gt;on&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nf'&gt;(code) -&amp;gt;&lt;/span&gt;
    &lt;span class='c1'&gt;# console.log &amp;quot;exit code #{code}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora aquele nosso comando gigantesco para deploy está encapsulado em um muito mais simples e fácil de modificar. É só entrarmos na pasta do projeto e digitarmos o comando abaixo e &lt;strong&gt;BOOM&lt;/strong&gt;, o deploy acontece como mágica.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;# muito mais simples, hein? =)&lt;/span&gt;
&lt;span class='nv'&gt;$ &lt;/span&gt;cake deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='rpido_quanto'&gt;Rápido quanto?&lt;/h2&gt;

&lt;p&gt;Aqui nós tentamos fazer ciência, e como cientistas nós sabemos que &lt;strong&gt;não se pode melhorar o que não se pode medir&lt;/strong&gt;. Então vamos deixar a fé de lado e ver na prática o quanto o rsync é mais rápido.&lt;/p&gt;

&lt;p&gt;Para simular diferentes velocidades em minha conexão com a internet utilizei o Network Link Conditioner para &lt;a href='http://www.apple.com/macosx/'&gt;OS X&lt;/a&gt; (que será assunto para outro post).&lt;/p&gt;

&lt;h3 id='upando_o_site_inteiro'&gt;Upando o site inteiro&lt;/h3&gt;

&lt;p&gt;Upando o site inteiro em diferentes conexões, obtivemos os seguintes números.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 Mbps DSL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP 165 segundos&lt;/li&gt;

&lt;li&gt;rsync 97 segundos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3G, average case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP 193 segundos&lt;/li&gt;

&lt;li&gt;rsync 112 segundos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EDGE, average case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP 350 segundos&lt;/li&gt;

&lt;li&gt;rsync 162 segundos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um gráfico com os dados que obtive&lt;/p&gt;
&lt;img alt='' class='img' height='300' src='http://loopinfinito.com.br/images/posts/2012-05-27-grafico-tempo-de-deploy-rsync-vs-ftp-site-inteiro.jpg' width='700' /&gt;
&lt;p&gt;Neste cenário o rsync foi bem mais rápido.&lt;/p&gt;

&lt;h3 id='adicionando_1_caractere_em_10_arquivos_diferentes'&gt;Adicionando 1 caractere em 10 arquivos diferentes&lt;/h3&gt;

&lt;p&gt;Neste teste eu adicionei um caractere ao final de 10 diferentes arquivos e os upei.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 Mbps DSL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP 10 segundos&lt;/li&gt;

&lt;li&gt;rsync 7 segundos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3G, average case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP 20 segundos&lt;/li&gt;

&lt;li&gt;rsync 11 segundos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EDGE, average case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP 29 segundos&lt;/li&gt;

&lt;li&gt;rsync 21 segundos&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt='' class='img' height='300' src='http://loopinfinito.com.br/images/posts/2012-05-27-grafico-tempo-de-deploy-rsync-vs-ftp-caracteres-10-arquivos-diferentes.jpg' width='700' /&gt;
&lt;p&gt;Em relação ao FTP eu apenas cronometrei o tempo gasto para upar os arquivos. Num cenário real nos ainda iríamos ter que escolher um a um os arquivos a serem enviados, o que resulta em mais tempo gasto. No caso do rsync, não precisamos escolher quais arquivos mandar. Ele mesmo verifica quais os arquivos que devem ser upados e faz todo o trabalho chato.&lt;/p&gt;

&lt;p&gt;Então não há mais motivos para upar arquivos como se ainda vivéssemos na década de 80. Automatize seu processo de deploy com o rsync e nunca mais esqueça de enviar &lt;strong&gt;aquele&lt;/strong&gt; arquivo novamente.&lt;/p&gt;
&lt;aside class='fonte'&gt;
  &lt;h3&gt;Referência&lt;/h3&gt;
  &lt;ul&gt;    
    &lt;li&gt;→&lt;a alt='How to Backup Linux? 15 rsync Command Examples' href='http://www.thegeekstuff.com/2010/09/rsync-command-examples/' title='How to Backup Linux? 15 rsync Command Examples'&gt;Geek Stuff: How to Backup Linux? 15 rsync Command Examples&lt;/a&gt;&lt;/li&gt;    
    &lt;li&gt;→&lt;a alt='CoffeeScript: Cake, and Cakefiles' href='http://coffeescript.org/#cake' title='CoffeeScript: Cake, and Cakefiles'&gt;CoffeeScript: Cake, and Cakefiles&lt;/a&gt;&lt;/li&gt;    
  &lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/05/23/saiba-a-hora-de-ejetar</id>
    <title>Saiba a Hora de Ejetar</title>
    <updated>2012-05-23T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/05/23/saiba-a-hora-de-ejetar/" />
    <author>
      <name>Almir Filho</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt='Saiba a Hora de Ejetar' height='432' src='/images/posts/2012-05-20-saiba-a-hora-de-ejetar.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Já fazia um tempinho que queria postar algo sobre produtividade, afinal de contas o Loop Infinito não se trata apenas de mais um blog sobre tecnologia web, e sim de assuntos como &lt;strong&gt;produtividade&lt;/strong&gt;, &lt;strong&gt;usabilidade&lt;/strong&gt; e &lt;strong&gt;lifestyle&lt;/strong&gt;. Estes assuntos serão abordados por aqui de vez em quando.&lt;/p&gt;

&lt;p&gt;Acho &lt;em&gt;produtividade&lt;/em&gt; um tema super importante e interessante. É sempre bom aprender truques que nos tornem mais produtivos, estamos sempre em busca de melhorar processos, economizar tempo e aumentar nossa eficiência – principalmente com aquelas coisas repetitivas (quem dera se os funcionários públicos fizessem o mesmo, hein).&lt;/p&gt;

&lt;p&gt;Estou lendo um livro muito interessante, chama-se &lt;a href='http://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1337872498&amp;amp;sr=1-1' target='_blank'&gt;&lt;strong&gt;Rework&lt;/strong&gt;&lt;/a&gt;. Este livro foi escrito por nada mais nada menos que os fundadores da &lt;a href='http://37signals.com/' target='_blank'&gt;&lt;em&gt;37signals&lt;/em&gt;&lt;/a&gt;, são dois meganerds que gostam das coisas bem feitas, &lt;a href='http://twitter.com/jasonfried' target='_blank'&gt;Jason Fried&lt;/a&gt; e &lt;a href='http://twitter.com/dhh' target='_blank'&gt;David Heinemeier Hansson&lt;/a&gt; (criador do &lt;em&gt;Ruby on Rails&lt;/em&gt;). Pra vocês terem uma idéia, o primeiro projeto que estes caras criaram juntos foi o &lt;a href='http://basecamp.com' target='_blank'&gt;Basecamp&lt;/a&gt; – inclusive foi assim que nasceu o &lt;em&gt;RoR&lt;/em&gt;, mas isso é outro papo. E sobre o livro, falarei melhor futuramente.&lt;/p&gt;

&lt;p&gt;Há um capítulo no livro que se chama &lt;em&gt;Reasons to quit&lt;/em&gt;, e foi isto que me inspirou a fazer este post. Eu traduzi o capítulo (é bem pequeno) e adicionei algumas coisas. Espero que gostem.&lt;/p&gt;

&lt;h2 id='chega_de_papo'&gt;Chega de papo&lt;/h2&gt;

&lt;p&gt;É fácil se conformar, baixar a cabeça e apenas trabalhar no que você &lt;strong&gt;pensa&lt;/strong&gt; ser importante. Difícil é levantar sua cabeça e se perguntar o &lt;strong&gt;porquê&lt;/strong&gt;. Aqui estão algumas perguntas importantes para você indagar a si mesmo e poder ter certeza de que você está investindo seu tempo em algo que importa.&lt;/p&gt;

&lt;h2 id='por_que_voc_est_fazendo_isto'&gt;Por que você está fazendo isto?&lt;/h2&gt;

&lt;p&gt;Você já se encontrou trabalhando em algo sem saber &lt;em&gt;exatamente&lt;/em&gt; o porquê? &lt;strong&gt;Alguém apenas disse-lhe para fazê-lo&lt;/strong&gt;. Isto é bem comum, na verdade. É por isso que é importante se perguntar por que você está trabalhando em _________. Para que serve isto? Quem se beneficia com isto? Qual a motivação por trás disto? Saber as respostas destas perguntas vai lhe ajudar a entender o seu próprio trabalho.&lt;/p&gt;

&lt;h2 id='que_problema_voc_est_resolvendo'&gt;Que problema você está resolvendo?&lt;/h2&gt;

&lt;p&gt;Qual é o problema? Os clientes estão confusos? &lt;em&gt;Você está confuso?&lt;/em&gt; Há algo que não está claro o suficiente? Havia algo que não era possível, e que agora é? Às vezes quando você faz estas perguntas, você vai descobrir que você está solucionando problemas &lt;em&gt;imaginários&lt;/em&gt;. É neste momento que é hora de parar e reavaliar &lt;strong&gt;o que diabos você está fazendo&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id='isto__til_de_verdade'&gt;Isto é útil de verdade?&lt;/h2&gt;

&lt;p&gt;Você está fazendo algo útil ou está apenas fazendo algo? É fácil confundir entusiasmo com &lt;strong&gt;utilidade&lt;/strong&gt;. Às vezes, tudo bem brincar um pouco e construir algo legal por diversão. Mas eventualmente você tem que parar e se perguntar se isto é útil, também. O legal acaba ficando ultrapassado. O útil, não.&lt;/p&gt;

&lt;h2 id='voc_est_agregando_valor'&gt;Você está agregando valor?&lt;/h2&gt;

&lt;p&gt;Agregar qualquer coisa é fácil; agregar &lt;strong&gt;valor é difícil&lt;/strong&gt;. Isto com que você está trabalhando está fazendo com que seu produto tenha mais valor para seus clientes? Com isto, eles poderão obter mais do seu produto do que antes? Às vezes coisas que você pensa que estão adicionando valor na verdade estão subtraindo valor. Muito ketchup pode estragar as fritas. &lt;em&gt;Valor é uma questão de equilíbrio&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id='isto_vai_mudar_o_comportamento'&gt;Isto vai mudar o comportamento?&lt;/h2&gt;

&lt;p&gt;Isto em que você está trabalhando vai realmente &lt;strong&gt;mudar&lt;/strong&gt; alguma coisa? Não crie algo a não ser que tenha um impacto real em como as pessoas irão usar seu produto.&lt;/p&gt;

&lt;h2 id='h_uma_maneira_mais_fcil'&gt;Há uma maneira mais fácil?&lt;/h2&gt;

&lt;p&gt;Sempre que você estiver trabalhando em algo, pergunte-se, &amp;#8220;Há uma maneira mais fácil?&amp;#8221; Muitas vezes você vai acabar descobrindo que esta maneira mais fácil é mais do que suficiente &lt;em&gt;por agora&lt;/em&gt;. Problemas geralmente são bem simples. Apenas imaginamos que eles exigem soluções difíceis, temos uma tendência incrível para complicar as coisas.&lt;/p&gt;

&lt;h2 id='o_que_voc_poderia_estar_fazendo_em_vez_disto'&gt;O que você poderia estar fazendo em vez disto?&lt;/h2&gt;

&lt;p&gt;O que você não pode fazer porque está ocupado com isto? Esta pergunta é especialmente importante para equipes pequenas, com recursos limitados. É quando priorização ganha ainda mais importância. Se você trabalha em &lt;em&gt;A&lt;/em&gt;, ainda pode terminar &lt;em&gt;B&lt;/em&gt; e &lt;em&gt;C&lt;/em&gt; antes de abril? Se não, não seria melhor ficar com &lt;em&gt;B&lt;/em&gt; e &lt;em&gt;C&lt;/em&gt; em vez de &lt;em&gt;A&lt;/em&gt;? Se você emperrou em alguma coisa por muito tempo, isso significa que há outras coisas que você não está podendo dar continuidade em detrimento disto.&lt;/p&gt;

&lt;h2 id='isto_realmente_vale_a_pena'&gt;Isto realmente vale a pena?&lt;/h2&gt;

&lt;p&gt;Isto em que você está trabalhando vale a pena de verdade? Esta reunião vale tirar seis pessoas de seus trabalhos por uma hora inteira? Vale a pena terminar um determinado trabalho durante toda esta noite, ou você poderia terminar amanhã? Vale a pena ficar todo estressado por causa de um comunicado de imprensa de um concorrente? &lt;em&gt;Vale a pena gastar seu dinheiro em propaganda?&lt;/em&gt; Determine o valor real do que quer que você esteja prestes a fazer, antes de mergulhar de cabeça.&lt;/p&gt;

&lt;p&gt;Mantenha-se fazendo estas perguntas acima a si próprio (e aos outros também). Você não precisa fazer disto uma coisa certinha ou formal, mas também não deixe que passe despercebido.&lt;/p&gt;

&lt;p&gt;Não tenha medo de suas conclusões, &lt;strong&gt;seja sincero consigo mesmo&lt;/strong&gt;. Às vezes abandonar o que você está trabalhando é a decisão correta, mesmo que você já tenha investido muito tempo e esforço nisto. Não jogue seu tempo fora.&lt;/p&gt;

&lt;h2 id='aperte_o_grande_boto_vermelho'&gt;Aperte o grande botão vermelho&lt;/h2&gt;

&lt;p&gt;Pode não ser a hora oportuna de fazer isso ainda, mas tome uma decisão, se prepare, se programe para &lt;strong&gt;apertar o botão de eject&lt;/strong&gt;. Estas são decisões que você deve tomar não só no ramo profissional, mas também em todos as outras áreas da sua vida.&lt;/p&gt;

&lt;p&gt;Se você não parar agora pra pensar em que você vai investir seu tempo, alguém certamente o fará, saberá o que quer e usará &lt;strong&gt;você&lt;/strong&gt; para atingir o sonho dele. Se liga, é sua vida, não venda seu tempo, não seja mais uma ferramenta para o sonho de outra pessoa.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/05/13/piao-da-casa-propria-em-css-3d</id>
    <title>Pião da Casa Própria em CSS 3D</title>
    <updated>2012-05-13T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/05/13/piao-da-casa-propria-em-css-3d/" />
    <author>
      <name>Caio Gondim</name>
    </author>
    <content type="html">&lt;p&gt;Quem não lembra do &lt;strong&gt;lendário&lt;/strong&gt; programa do Silvio Santos &lt;a href='http://www.youtube.com/watch?v=X0YAnNNK2OE'&gt;Pião da Casa Própria&lt;/a&gt;? Neste post vamos trazer esta lenda de volta a vida, desta vez encarnado em puro código HTML5, sem imagens ou plugins. Se seu navegador for o Chrome, Safari ou Firefox atualizados, você poderá ver abaixo como nosso experimento irá ficar ao final deste post.&lt;/p&gt;
&lt;iframe class='img' frameborder='0' id='experimento-piao' src='http://caiogondim.github.com/piao-da-casa-propria-em-css-3d/' style='height:432px;'&gt; &lt;/iframe&gt;
&lt;p&gt;Todo o código deste experimento está disponível no &lt;a href='https://github.com/caiogondim/piao-da-casa-propria-em-css-3d'&gt;GitHub&lt;/a&gt; e um preview completo pode ser visto &lt;a href='http://caiogondim.github.com/piao-da-casa-propria-em-css-3d/'&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='a_brincadeira__muito_fcil'&gt;A brincadeira é muito fácil&lt;/h2&gt;

&lt;p&gt;Vamos começar com o código HTML. Apenas uma &lt;code&gt;div&lt;/code&gt; contendo 6 outras &lt;code&gt;div&lt;/code&gt;, uma para cada face do pião, a &lt;code&gt;div&lt;/code&gt; wrapper, que servirá de container para o pião, e mais uma última para a moldura do pião.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;piao&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- todas as faces do pião --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;numero um&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;1&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;numero dois&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;2&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;numero tres&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;3&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;numero quatro&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;4&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;numero cinco&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;5&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;numero seis&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;6&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;        
  &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;moldura&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora vamos dar um pouco de estilo ao pião e à moldura.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#wrapper&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;400px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;400px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;absolute&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;left&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;margin-left&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-200px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;margin-top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-200px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;relative&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;40px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* centraliza o pião */&lt;/span&gt;
  &lt;span class='k'&gt;margin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt; &lt;span class='k'&gt;auto&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* centraliza o pião */&lt;/span&gt;
  &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;330px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;200px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='nc'&gt;.numero&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;absolute&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;200px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;6px&lt;/span&gt; &lt;span class='k'&gt;solid&lt;/span&gt; &lt;span class='nb'&gt;white&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;sizing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;text-align&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;center&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;line-height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;320px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;font-family&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;Impact&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sans-serif&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;font-size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;240px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nb'&gt;white&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;background-color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;rgb&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#moldura&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;400px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;400px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;50px&lt;/span&gt; &lt;span class='k'&gt;solid&lt;/span&gt; &lt;span class='k'&gt;rgb&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;200&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;radius&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;250px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;absolute&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-45px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='k'&gt;left&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-50px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='c'&gt;/* &lt;/span&gt;
&lt;span class='c'&gt;    1ª shadow: simula 3D no elemento, na parte interna&lt;/span&gt;
&lt;span class='c'&gt;    2ª shadow: shadow interna para simular profundidade&lt;/span&gt;
&lt;span class='c'&gt;    3ª shadow: simula 3D no elemento, na parte externa&lt;/span&gt;
&lt;span class='c'&gt;    4ª shadow: shadow externa para simular profundidade &lt;/span&gt;
&lt;span class='c'&gt;  */&lt;/span&gt;
  &lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;shadow&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; 
    &lt;span class='k'&gt;inset&lt;/span&gt; &lt;span class='m'&gt;-1px&lt;/span&gt; &lt;span class='m'&gt;-2px&lt;/span&gt; &lt;span class='m'&gt;0px&lt;/span&gt; &lt;span class='m'&gt;3px&lt;/span&gt; &lt;span class='k'&gt;rgb&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;150&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='k'&gt;inset&lt;/span&gt; &lt;span class='m'&gt;-1px&lt;/span&gt; &lt;span class='m'&gt;-2px&lt;/span&gt; &lt;span class='m'&gt;10px&lt;/span&gt; &lt;span class='m'&gt;10px&lt;/span&gt; &lt;span class='n'&gt;rgba&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; 
    &lt;span class='m'&gt;-2px&lt;/span&gt; &lt;span class='m'&gt;-2px&lt;/span&gt; &lt;span class='m'&gt;0px&lt;/span&gt; &lt;span class='m'&gt;3px&lt;/span&gt; &lt;span class='k'&gt;rgb&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;150&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='m'&gt;-4px&lt;/span&gt; &lt;span class='m'&gt;-4px&lt;/span&gt; &lt;span class='m'&gt;10px&lt;/span&gt; &lt;span class='m'&gt;10px&lt;/span&gt; &lt;span class='n'&gt;rgba&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora já podemos ver algo sem graça no browser com o código acima: um número 6 dentro de um círculo vermelho com um efeito 3D simulado.&lt;/p&gt;

&lt;h2 id='posio_no_plano_3d'&gt;Posição no plano 3D&lt;/h2&gt;

&lt;p&gt;Vamos agora posicionar o pião no plano 3D. Mas antes uma breve explicação sobre o plano 3D em CSS.&lt;/p&gt;

&lt;p&gt;Temos 3 eixos de coordenadas para posicionarmos os elementos relativos a eles. O eixo &lt;strong&gt;X é o eixo horizontal&lt;/strong&gt; (esquerda-direita) e tem sua origem no ponto mais a esquerda. O eixo &lt;strong&gt;Y é o eixo vertical&lt;/strong&gt; (cima-baixo) e, diferente de um plano cartesiano comum, tem seu início na parte mais acima do navegador. Portanto, o ponto do seu navegador mais acima e a esquerda é o ponto de coordenadas X = 0 e Y = 0.&lt;/p&gt;

&lt;p&gt;Mas para objetos 3D nós precisamos de mais um eixo, o eixo &lt;strong&gt;Z&lt;/strong&gt;, que vai nos dar a sensação de &lt;strong&gt;profundidade&lt;/strong&gt;. Este eixo se inicia no monitor e cresce no sentido monitor &amp;rarrw; você. Então, quanto mais &amp;#8220;distante&amp;#8221; do monitor o objeto aparentar estar, maior o valor de Z.&lt;/p&gt;

&lt;p&gt;Agora entendendo um pouco sobre o plano 3D, vamos organizar os elementos a fim de formar o pião.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.um&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='c'&gt;/* &lt;/span&gt;
&lt;span class='c'&gt;    a rotação deste elemento é 0, o que já é o valor padrão&lt;/span&gt;
&lt;span class='c'&gt;    então não há necessidade de redeclarar sua rotação&lt;/span&gt;
&lt;span class='c'&gt;   */&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.dois&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;60&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.tres&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;120&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.quatro&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;180&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.cinco&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;240&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.seis&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;300&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;No trecho de CSS acima, nós giramos as faces em relação ao eixo Y. Precisamos girar todas as faces a fim de fecharmos uma volta. Como uma volta possui 360 graus e o pião possui 6 faces, então iremos rotacionar cada face em 60 graus mais a rotação da face anterior, ou seja, o primeiro elemento irá ser rotacionado em 60 graus, o segundo em 120 graus, o terceiro em 180 graus, e assim por diante até o último elemento.&lt;/p&gt;

&lt;p&gt;Porém se rotacionarmos apenas no eixo Y os elementos, eles ficarão todos um por cima dos outros, apenas inclinados de forma diferente. Estarão todos no centro do que será nosso pião. Precisamos agora afastar as faces umas das outras. E para isso iremos usar a propriedade &lt;code&gt;translateZ&lt;/code&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;preserve&lt;/span&gt;&lt;span class='m'&gt;-3&lt;/span&gt;&lt;span class='err'&gt;d&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.um&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;translateZ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;170px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.dois&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;60&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;translateZ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;170px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.tres&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;120&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;translateZ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;170px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.quatro&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;180&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;translateZ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;170px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.cinco&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;240&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;translateZ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;170px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='nc'&gt;.numero.seis&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;300&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;translateZ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;170px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Com o &lt;code&gt;transform-style: preserve-3d&lt;/code&gt; estamos dizendo que os filhos diretos do elemento pião irão compartilhar o mesmo espaço 3D que o pai. Caso contrário os elementos seriam renderizados de forma plana no elemento pai.&lt;/p&gt;

&lt;p&gt;Depois, com a regra &lt;code&gt;translateZ&lt;/code&gt;, estamos afastanto todos os elementos do seu ponto inicial no eixo Z. Com o &lt;code&gt;rotateY&lt;/code&gt; giramos todas as faces e com o &lt;code&gt;translateZ&lt;/code&gt; é como se estivéssemos pedindo para que todas as faces dessem um passo de 170px à frente. Como giramos todas para um lado diferente, elas irão &amp;#8220;caminhar&amp;#8221; para um sentido diferente.&lt;/p&gt;

&lt;p&gt;Com isso temos o nosso pião 3D, mas para deixar tudo mais interessante, vamos usar &lt;code&gt;animation&lt;/code&gt; para fazer a rotação do pião.&lt;/p&gt;

&lt;h2 id='animao_em_ritmo_de_festa'&gt;Animação em ritmo de festa&lt;/h2&gt;

&lt;p&gt;O efeito que queremos ver é o do pião rodando em relação ao seu eixo Y, o mesmo eixo em que rotacionamos as faces do pião. Para isso iremos criar uma animação com o estado inicial no ponto 0 graus do eixo Y e estado final no 360 graus, ou seja, uma volta completa.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='c'&gt;/* &lt;/span&gt;
&lt;span class='c'&gt;  animação para o pião rodar &lt;/span&gt;
&lt;span class='c'&gt;  uma animação básica ao redor do eixo Y&lt;/span&gt;
&lt;span class='c'&gt;*/&lt;/span&gt;
&lt;span class='k'&gt;@-webkit-keyframes&lt;/span&gt; &lt;span class='nt'&gt;rodando&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nt'&gt;from&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='nt'&gt;to&lt;/span&gt;   &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rotateY&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;-360&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;No trecho acima definimos nossa animação e a chamamos de rodando (em homenagem). Agora é só a usarmos no elemento que desejarmos.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nf'&gt;#piao&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;animation&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;rodando&lt;/span&gt; &lt;span class='m'&gt;4s&lt;/span&gt; &lt;span class='n'&gt;infinite&lt;/span&gt; &lt;span class='n'&gt;linear&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Aqui dizemos que queremos animar o elemento pião, utilizando a animação &amp;#8220;rodando&amp;#8221;, demorando 4 segundos para ir de seu estado inicial ao estado final, essa animação não irá parar (infinite) e a sua transição entre estados será linear.&lt;/p&gt;

&lt;p&gt;Agora se checarmos no navegador, iremos finalmente ter nosso pião da casa própria em HTML5. E rodandooo.&lt;/p&gt;

&lt;h2 id='one_more_thing'&gt;One more thing&amp;#8230;&lt;/h2&gt;

&lt;p&gt;O Pião da Casa Própria não seria o mesmo sem a &lt;strong&gt;clássica&lt;/strong&gt; trilha sonnora. Então vamos adicioná-la ao experimento. Iremos usar a nova tag &lt;code&gt;audio&lt;/code&gt; para reproduzir a música sem a nececissade do Flash. &lt;!-- O seu uso é bastante simples.  --&gt; Basta declarar a tag &lt;code&gt;audio&lt;/code&gt; e dentro dela as tags &lt;code&gt;source&lt;/code&gt; com os caminhos para o mesmo arquivo salvo em diferentes codecs.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='c'&gt;&amp;lt;!-- trilha do pião da casa própria. máá ô-ê --&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;audio&lt;/span&gt; &lt;span class='na'&gt;preload=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;auto&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;loop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;source&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;piao-da-casa-propria-soundtrack.mp3&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;source&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;piao-da-casa-propria-soundtrack.m4a&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class='nt'&gt;&amp;lt;source&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;piao-da-casa-propria-soundtrack.ogg&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;O navegador irá tentar de cima para baixo executar os formatos, e quando achar um que possa reproduzir, irá carregar e não irá mais procurar por outros &lt;code&gt;source&lt;/code&gt;. O uso desta tag é necessário pois cada navegador dá suporte a um &lt;a href='http://html5doctor.com/native-audio-in-the-browser/'&gt;diferente conjunto de codecs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso queiram escutar a trilha sonora agora e ver o pião rodando é só apertar o botão play no lado direito superior dentro do experimento, no &lt;a href='#experimento-piao'&gt;início&lt;/a&gt; do post. Utilizei a API JavaScript para controlar o comportamento da tag &lt;code&gt;audio&lt;/code&gt;, mas para não perdemos o foco, essa API fica para um próximo post. &lt;!-- 
Existe também uma API JavaScript para controlar por programação o áudio, mas para não perdemos o foco do post não vamos entrar em detalhes.
Se quiser escutar a trilha sonora, basta apertar o botão _play_ no experimento logo no começo do post.
É necessário esperar fazer o download da música. --&gt;&lt;/p&gt;
&lt;aside class='fonte'&gt;
  &lt;h3&gt;Referência&lt;/h3&gt;
  &lt;ul&gt;    
    &lt;li&gt;→&lt;a alt='Mozilla Developer Network' href='https://developer.mozilla.org/En/HTML/Element/Audio' title='Mozilla Developer Network'&gt;Mozilla Developer Network: audio&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;→&lt;a alt='Mozilla Developer Network' href='https://developer.mozilla.org/en/CSS/transform-style' title='Mozilla Developer Network'&gt;Mozilla Developer Network: transform style&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;→&lt;a alt='Webkit Morphing Cubes' href='http://www.webkit.org/blog-files/3d-transforms/morphing-cubes.html' title='Webkit Morphing Cubes'&gt;WebKit blog&lt;/a&gt;&lt;/li&gt;  
  &lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/05/07/ganhando-visibilidade-com-schema-org</id>
    <title>Ganhando visibilidade com schema.org</title>
    <updated>2012-05-07T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/05/07/ganhando-visibilidade-com-schema-org/" />
    <author>
      <name>Almir Filho</name>
    </author>
    <content type="html">&lt;style type='text/css'&gt;
	
	circle {
		-webkit-transition: fill 0.5s ease;
		-khtml-transition: fill 0.5s ease;
		-moz-transition: fill 0.5s ease;
		-ms-transition: fill 0.5s ease;
		-o-transition: fill 0.5s ease;
		transition: fill 0.5s ease;
	}

	g.circle:hover circle {
		fill: #ccc;
	}

&lt;/style&gt;&lt;p&gt;&lt;img alt='' height='432' src='http://loopinfinito.com.br/images/posts/2012-05-07-ganhando-visibilidade-com-schema-org.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Ontem finalmente saímos da teoria e realizamos a marcação semântica do nosso blog usando &lt;strong&gt;microdata&lt;/strong&gt; e os vocabulários &lt;strong&gt;schema.org&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hoje explicarei passo a passo como fiz isto aqui no Loop Infinito. A qualquer momento você pode visualizar nosso código fonte e observar estas mesmas marcações lá.&lt;/p&gt;

&lt;p&gt;Aconselho a leitura dos meus últimos 2 posts sobre o assunto, em especial do &lt;a alt='Microdata (Loop Infinito)' href='http://loopinfinito.com.br/2012/05/02/microdata/' title='Microdata (Loop Infinito)'&gt;último&lt;/a&gt; onde explico como usar microdata e schema.org detalhadamente.&lt;/p&gt;

&lt;h2 id='identificando_as_entidades'&gt;Identificando as entidades&lt;/h2&gt;

&lt;p&gt;O primeiro passo é identificar as entidades na página que desejamos marcar semanticamente. Aqui no Loop Infinito, apliquei as marcações em 3 páginas diferentes: a &lt;a href='http://loopinfinito.com.br'&gt;página inicial&lt;/a&gt;, a página interna do post (onde você está agora) e a página &lt;a href='http://loopinfinito.com.br/sobre/'&gt;Sobre&lt;/a&gt; (a página &lt;a href='http://loopinfinito.com.br/projetos/'&gt;Projetos&lt;/a&gt; ainda não fizemos).&lt;/p&gt;

&lt;p&gt;Irei mostrar como realizei as marcações semânticas apenas na página inicial, onde aparece a listagem dos posts resumidos com links para suas versões completas. Caso você deseje saber como ficaram os códigos fontes das outras páginas, basta abri-los no seu navegador, o princípio de marcação é o mesmo. Abaixo segue um &lt;em&gt;print screen&lt;/em&gt; de um destes posts resumidos da página inicial:&lt;/p&gt;
&lt;p id='print-home'&gt;&lt;img alt='Print screen de post resumido na Home (loopinfinito.com.br)' height='662' src='http://loopinfinito.com.br/images/posts/2012-05-07-ganhando-visibilidade.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;A primeira entidade que podemos identificar nesta página é o próprio &lt;strong&gt;Post&lt;/strong&gt;, ou seja, um &lt;strong&gt;Artigo&lt;/strong&gt; ou coisa parecida. Navegando pelo site do &lt;a alt='schema.org' href='http://schema.org'&gt;schema.org&lt;/a&gt; pude achar o vocabulário &lt;a class='bold' href='http://schema.org/Article'&gt;Article&lt;/a&gt;, que corresponde a Artigo. Percebi também que há mais 3 vocabulários que estendem de Article, ou seja, são vocabulários Article &lt;strong&gt;mais específicos&lt;/strong&gt;, e estes são &lt;a alt='Vocabulário BlogPosting (schema.org)' href='http://schema.org/BlogPosting' title='Vocabulário BlogPosting (schema.org)'&gt;BlogPosting&lt;/a&gt;, &lt;a alt='Vocabulário NewsArticle (schema.org)' href='http://schema.org/NewsArticle' title='Vocabulário NewsArticle (schema.org)'&gt;NewsArticle&lt;/a&gt; e &lt;a alt='Vocabulário ScholarlyArticle (schema.org)' href='http://schema.org/ScholarlyArticle' title='Vocabulário ScholarlyArticle (schema.org)'&gt;ScholarlyArticle&lt;/a&gt;.&lt;/p&gt;
&lt;svg class='img' height='330' width='700'&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='354.691' x2='221.759' y1='115.241' y2='268.516' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='355.459' x2='355.191' y1='1' y2='110.069' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='354.691' x2='355.287' y1='115.241' y2='268.516' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='354.452' x2='488.813' y1='108.637' y2='268.516' /&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='221.758' cy='268.516' fill='#EEEEEE' r='56.315' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='16.2905' transform='matrix(1 0 0 1 178.2629 275.3572)'&gt;BlogPosting&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='355.191' cy='108.069' fill='#EEEEEE' r='41.483' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='19.3394' transform='matrix(1 0 0 1 327.967 113.1091)'&gt;Article&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='355.288' cy='268.516' fill='#EEEEEE' r='56.315' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='16.2905' transform='matrix(1 0 0 1 312.3694 275.3572)'&gt;NewsArticle&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='488.813' cy='268.516' fill='#EEEEEE' r='56.315' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='14' transform='matrix(1 0 0 1 439.5764 275.3572)'&gt;ScholarlyArticle&lt;/text&gt;
	&lt;/g&gt;
	&lt;text fill='#999999' font-size='14' transform='matrix(1 0 0 1 314.9143 25.4998)'&gt;CreativeWork&lt;/text&gt;
&lt;/svg&gt;
&lt;p&gt;Obviamente os nossos posts se encaixam na categoria &lt;strong&gt;BlogPosting&lt;/strong&gt;, então este será o primeiro vocabulário a ser utilizado no nosso caso.&lt;/p&gt;

&lt;h2 id='antes'&gt;Antes&lt;/h2&gt;

&lt;p&gt;O trecho de código abaixo mostra como era o código fonte de um resumo de post (o exemplo abaixo ilustra o &lt;a href='#print-home'&gt;print screen&lt;/a&gt; acima). Dividi o código em blocos para facilitar a leitura (acho que ninguém gosta de ficar olhando para um monte de linhas de código de uma vez, né).&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='c'&gt;&amp;lt;!-- bloco do post --&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;section&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-container&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- menu da lateral direita --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;aside&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-meta&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt; ... &lt;span class='nt'&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- área principal do post --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;article&amp;gt;&lt;/span&gt; ... &lt;span class='nt'&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Menu da lateral direita&lt;/em&gt; detalhadamente:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;aside&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-meta&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- data da publicação --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-data&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;04/05/2012&lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- autor do post --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-autor&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Caio Gondim&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- quantidade de comentarios --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-comentarios&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;1 Comentário e 4 Reações&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- tags do post --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-tags&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;#&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;javascript&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Área principal do post&lt;/em&gt; detalhadamente:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- título do post --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;h1&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Herança em JavaScript parte I&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- conteúdo do post --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- imagem principal --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- texto (o post de fato) --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Uma das coisas que mais assusta programadores vindos de...&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- link para o post completo --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;leia-mais&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Continue lendo &lt;span class='ni'&gt;&amp;amp;rarrw;&lt;/span&gt;&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK, nada de mais. Basicamente uma marcação simples HTML5.&lt;/p&gt;

&lt;h2 id='depois'&gt;Depois&lt;/h2&gt;

&lt;p&gt;Agora vamos ver como ficou o código fonte &lt;strong&gt;depois da marcação semântica&lt;/strong&gt;, percebam o uso das propriedades &lt;code&gt;itemscope&lt;/code&gt;, &lt;code&gt;itemtype&lt;/code&gt; e &lt;code&gt;itemprop&lt;/code&gt;. Mesmo esquema aqui, dividi o código em blocos:&lt;/p&gt;

&lt;h3 id='elemento_geral'&gt;Elemento geral&lt;/h3&gt;
&lt;p /&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='c'&gt;&amp;lt;!-- adicionamos as propriedades itemscope e itemtype para BlogPosting --&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;section&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-container&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/BlogPosting&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- adicionamos esta tag &amp;lt;span&amp;gt; para o publicador do post --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;span&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;publisher&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Loop Infinito&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    
    &lt;span class='nt'&gt;&amp;lt;aside&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-meta&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt; ... &lt;span class='nt'&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;article&amp;gt;&lt;/span&gt; ... &lt;span class='nt'&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Definimos a entidade principal (BlogPosting) no elemento que engloba todos os dados sobre o post;&lt;/li&gt;

&lt;li&gt;O elemento &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; não é visível para o leitor (classe &lt;code&gt;.hidden&lt;/code&gt;), pois foi adicionado apenas para podermos especificar que este post foi publicado pelo Loop Infinito com &lt;code&gt;itemprop=&quot;publisher&quot;&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;Os outros 2 elementos principais ainda permanecem inalterados por enquanto.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Obs.:&lt;/strong&gt; A aplicação da propriedade &lt;code&gt;itemscope=&quot;itemscope&quot;&lt;/code&gt; pode ser feita apenas colocando &lt;code&gt;itemscope&lt;/code&gt; dentro da tag, pois é uma propriedade que não contém valor explícito associado, e a especificação HTML permite seu uso desta maneira. Apenas usamos assim porque estamos obedecendo à sintaxe XHTML – também permitida no HTML5 – neste exemplo.&lt;/p&gt;

&lt;h3 id='menu_lateral_direito'&gt;Menu lateral direito&lt;/h3&gt;
&lt;p /&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;aside&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-meta&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-data&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='c'&gt;&amp;lt;!-- data de publicação do post --&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;time&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;datePublished&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;datetime=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;2012-05-06&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
                06/05/2012
            &lt;span class='nt'&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-autor&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='c'&gt;&amp;lt;!-- autor do post --&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;rel=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Caio Gondim&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-comentarios&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
        	&lt;span class='c'&gt;&amp;lt;!-- contagem de comentários do post --&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;interactionCount&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
                1 Comentário e 4 Reações
            &lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post-tags&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;#&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;javascript&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class='c'&gt;&amp;lt;!-- palavras-chave do post --&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;span&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;javascript, ...&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Envolvemos a data de publicação com um elemento &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; (novo no HTML5) para usar a propriedade &lt;code&gt;itemprop=&quot;datePublished&quot;&lt;/code&gt;. Usamos também a propriedade &lt;code&gt;datetime&lt;/code&gt; para podermos especificar a data no formato padrão (aaaa-mm-dd);&lt;/li&gt;

&lt;li&gt;Em autor, é aconselhável o uso da propriedade HTML &lt;code&gt;rel=&quot;author&quot;&lt;/code&gt; (&lt;a href='http://webdesign.about.com/od/html5tags/qt/rel-author-authorship.htm'&gt;leia sobre&lt;/a&gt;), além de especificar a propriedade &lt;code&gt;itemprop=&quot;author&quot;&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;Na contagem de comentários, usei a propriedade &lt;code&gt;itemprop=&quot;interactionCount&quot;&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;Adicionei um elemento &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; invisível para colocar todas as palavras-chave dentro, já de que as tags do post estão separadas por elementos &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; acima. Usamos a propriedade &lt;code&gt;itemprop=&quot;keywords&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='rea_principal_do_post'&gt;Área principal do post&lt;/h3&gt;
&lt;p /&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    	&lt;span class='c'&gt;&amp;lt;!-- título do post --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;headline&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
                Herança em JavaScript parte I
            &lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- imagem principal do post --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;thumbnailUrl&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- envolvemos o resumo com uma &amp;lt;div&amp;gt; a descrição do post --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
        	&lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Uma das coisas que mais assusta programadores...&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class='c'&gt;&amp;lt;!-- url do post --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;...&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;leia-mais&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Continue lendo &lt;span class='ni'&gt;&amp;amp;rarrw;&lt;/span&gt;&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Definimos o título do post com a propriedade &lt;code&gt;itemprop=&quot;headline&quot;&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;A propriedade &lt;code&gt;itemprop=&quot;thumbnailUrl&quot;&lt;/code&gt; serve para especificar uma imagem associada ao post;&lt;/li&gt;

&lt;li&gt;Adicionamos um elemento &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; para envolver o resumo do post, que servirá para definir a descrição do post através da propriedade &lt;code&gt;itemprop=&quot;description&quot;&lt;/code&gt;;&lt;/li&gt;

&lt;li&gt;O link &amp;#8220;Continue lendo&amp;#8221; contém a URL do post, que pode ser usada para definir a URL da entidade através da propriedade &lt;code&gt;itemprop=&quot;url&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='testando'&gt;Testando&lt;/h2&gt;

&lt;p&gt;Bem, com isto terminamos a marcação semântica da página inicial do Loop Infinito usando o padrão HTML5 Microdata com os vocabulários schema.org.&lt;/p&gt;

&lt;p&gt;Agora podemos testar se está tudo beleza com o &lt;a href='http://www.google.com/webmasters/tools/richsnippets'&gt;Rich Snippets Testing Tool&lt;/a&gt; do Google. Basta informar uma URL que o &lt;em&gt;crawler&lt;/em&gt; do Google realizará uma visita ao endereço informado, irá procurar por informações semânticas e depois irá exibir o resultado da varredura.&lt;/p&gt;

&lt;p&gt;Fiz um teste com a URL da página inicial do blog (&lt;a href='http://loopinfinito.com.br'&gt;loopinfinito.com.br&lt;/a&gt;) e apareceram 5 itens BlogPosting (sem contar com este post). Eis um destes itens:&lt;/p&gt;
&lt;pre&gt;
Item 
    Type: http://schema.org/blogposting
    publisher = Loop Infinito 
    datepublished = 2012-05-04 

    author 
        text = Caio Gondim 
        href = http://twitter.com/caio_gondim

    interactioncount 
        text = Carregando... 
        href = http://loopinfinito.com.br/2012/05/04/heranca-em-javascript-parte-1/#disqus_thread
    
    keywords = javascript, js, web development, desenvolvimento web, html5, front-end, programação, oop, orientação a objetos, herança, orientação a protótipos, java 
    
    headline 
        text = Herança em JavaScript parte I 
        href = http://loopinfinito.com.br/2012/05/04/heranca-em-javascript-parte-1/
    
    thumbnailurl = http://loopinfinito.com.br/images/posts/2012-05-04-heranca-em-javascript.jpg 
    
    description = Uma das coisas que mais assusta programadores vindos de linguagens orientadas a objeto, como Java e C++, é a falta de classes em JavaScript. Muitos, inclusive, tentam simular este comportamento... 
    
    url 
        text = Continue lendo &amp;rarrw; 
        href = http://loopinfinito.com.br/2012/05/04/heranca-em-javascript-parte-1/
&lt;/pre&gt;
&lt;p&gt;Com isto, vemos que o Google está extraindo nossos metadados de forma correta. Aconselho que façam o mesmo teste com as nossas outras páginas marcadas com schema.org (interna do post e Sobre) para quem possam ver as direfenças entre elas. A diferença entre a página inicial e a interna do post é mínima: no resumo da página inicial temos as propriedades &lt;code&gt;thumbnailurl&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; e &lt;code&gt;url&lt;/code&gt;, enquanto que na interna temos a propriedade &lt;code&gt;articleBody&lt;/code&gt; substituindo essas 3. Por hoje é só, até a próxima!&lt;/p&gt;
&lt;aside class='fonte'&gt;
	&lt;h3&gt;Referência&lt;/h3&gt;
	&lt;ul&gt;
		&lt;li&gt;→&lt;a alt='Marcação Semântica (Loop Infinito)' href='http://loopinfinito.com.br/2012/04/26/marcacao-semantica/' title='Marcação Semântica (Loop Infinito)'&gt;Marcação Semântica&lt;/a&gt; &lt;span class='comment'&gt;//loop infinito&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a alt='Microdata (Loop Infinito)' href='http://loopinfinito.com.br/2012/05/02/microdata/' title='Microdata (Loop Infinito)'&gt;Microdata: Como usar&lt;/a&gt; &lt;span class='comment'&gt;//loop infinito&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a alt='Schema.org' href='http://schema.org' title='Schema.org'&gt;Schema.org&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a alt='Rel=author Authorship Markup in HTML5' href='http://webdesign.about.com/od/html5tags/qt/rel-author-authorship.htm' title='Rel=author Authorship Markup in HTML5'&gt;Rel=author Authorship Markup in HTML5&lt;/a&gt; &lt;span class='comment'&gt;//about.com&lt;/span&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/05/04/heranca-em-javascript-parte-1</id>
    <title>Herança em JavaScript parte I</title>
    <updated>2012-05-04T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/05/04/heranca-em-javascript-parte-1/" />
    <author>
      <name>Caio Gondim</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt='' height='432' src='http://loopinfinito.com.br/images/posts/2012-05-04-heranca-em-javascript.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Diferente das linguagens mais conhecidas, como Java ou C++ que utilizam a orientação a objetos clássica, JavaScript utiliza uma abordagem diferente para compartilhar código entre entidades, chamada de orientação a protótipo. Mas antes de entrarmos em detalhes, vamos primeiro relembrar o que é a herança clássica nas linguagens orientadas a objetos.&lt;/p&gt;

&lt;h2 id='herana_clssica'&gt;Herança clássica&lt;/h2&gt;

&lt;p&gt;Herança em OOP é a capacidade de classes &lt;strong&gt;compartilharem&lt;/strong&gt; atributos e métodos entre si. Geralmente a herança é usada para compartilhar comportamentos generalizados e comuns entres as classes filhas.&lt;/p&gt;

&lt;h3 id='show_me_the_code'&gt;Show me the code&lt;/h3&gt;

&lt;p&gt;Imaginem que temos que representar em nossa aplicação alguns animais, como gato e cachorro. Com herança podemos definir comportamentos comuns entre eles apenas uma vez, como respirar, nascer e morrer, e reutilizar estes métodos já implementados apenas os herdando nas classes filhas.&lt;/p&gt;

&lt;p&gt;Vamos implementar o cenário acima em Java. Como desejamos representar gatos e cachorros, e sabemos que eles possuem métodos similares, como nascer, morrer e respirar, vamos criar uma classe Animal e implementar estes métodos nela, para que gatos e cachorros possam herdá-los.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='c1'&gt;// setamos a classe como abstrata pois não desejamos criar&lt;/span&gt;
&lt;span class='c1'&gt;// objetos do tipo animal, apenas os tipos mais&lt;/span&gt;
&lt;span class='c1'&gt;// especializados como Gato ou Cachorro podem ser instânciados&lt;/span&gt;
&lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kd'&gt;abstract&lt;/span&gt; &lt;span class='kd'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Animal&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;nascer&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;

  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;morrer&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;

  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;respirar&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora definimos as classes Gato e Cachorro, que irão herdar de Animal e implementar métodos que só fazem sentido em seu próprio escopo, como miar no caso de Gato e latir no caso de Cachorro.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='java'&gt;&lt;span class='c1'&gt;// além do método miar, os objetos do tipo Gato &lt;/span&gt;
&lt;span class='c1'&gt;// terão também, devido a herança, os métodos de Animal&lt;/span&gt;
&lt;span class='kd'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Gato&lt;/span&gt; &lt;span class='kd'&gt;extends&lt;/span&gt; &lt;span class='n'&gt;Animal&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;miar&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;

  &lt;span class='c1'&gt;// construtor&lt;/span&gt;
  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='nf'&gt;Gato&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='c1'&gt;// com os objetos do tipo Cachorro acontece o mesmo&lt;/span&gt;
&lt;span class='c1'&gt;// além do método latir, definido explicitamente na classe&lt;/span&gt;
&lt;span class='c1'&gt;// ele irá herdar os métodos nascer, morrer e respirar&lt;/span&gt;
&lt;span class='kd'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Cachorro&lt;/span&gt; &lt;span class='kd'&gt;extends&lt;/span&gt; &lt;span class='n'&gt;Animal&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;latir&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;..&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;

  &lt;span class='c1'&gt;// construtor&lt;/span&gt;
  &lt;span class='kd'&gt;public&lt;/span&gt; &lt;span class='nf'&gt;Cachorro&lt;/span&gt;&lt;span class='o'&gt;()&lt;/span&gt; &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;...&lt;/span&gt;
  &lt;span class='o'&gt;}&lt;/span&gt;
&lt;span class='o'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Definimos a relação de herança com a palavra reservada &lt;code&gt;extends&lt;/code&gt;. Com isso as classes Gato e Cachorro irão possuir, além de seus próprios métodos, os métodos herdados de Animal, como nascer, morrer e respirar.&lt;/p&gt;

&lt;p&gt;Então fica claro que com herança conseguimos um enorme reuso de código. De outra forma, teríamos que redefinir métodos e atributos comuns em todas as classes, tornando a manutenção do código mais complexa e propensa a erros.&lt;/p&gt;

&lt;h2 id='cadeia_de_prottipos'&gt;Cadeia de protótipos&lt;/h2&gt;

&lt;p&gt;Em JavaScript (quase) tudo é um objeto, não existem classes. Até mesmo as &lt;code&gt;function&lt;/code&gt; são objetos. Se quisermos herdar os métodos e atributos de um objeto, o utilizamos como protótipo do novo objeto a ser criado. Mesmo que não esteja definido explicitamente no código, todos os outros objetos de JavaScript, com a exceção do objeto &lt;code&gt;Object&lt;/code&gt;, utilizam um outro objeto como protótipo.&lt;/p&gt;

&lt;p&gt;Como no exemplo abaixo, definimos um objeto vazio, um array vazio e uma função. Eles todos herdarão métodos e atributos de seus protótipos.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// aqui criamos um novo objeto genérico com o nome carro&lt;/span&gt;
&lt;span class='c1'&gt;// ele automaticamente usará o prototipo de Object&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;carro&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt;
&lt;span class='nx'&gt;carro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;modelo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Celta&amp;#39;&lt;/span&gt;
&lt;span class='nx'&gt;carro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;marca&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Chevrolet&amp;#39;&lt;/span&gt;
&lt;span class='nx'&gt;carro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;hasOwnProperty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;modelo&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// método herdado de Object&lt;/span&gt;
&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getPrototypeOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;carro&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// retorna Object&lt;/span&gt;

&lt;span class='c1'&gt;// frutas herdará as propriedades de Array&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;frutas&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;morango&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;manga&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;laranja&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='nx'&gt;frutas&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;reverse&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// método herdado de Array&lt;/span&gt;
&lt;span class='nx'&gt;frutas&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;hasOwnProperty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// método herdado de Object&lt;/span&gt;
&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getPrototypeOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;frutas&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// retorna []&lt;/span&gt;
&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getPrototypeOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getPrototypeOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;frutas&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='c1'&gt;// retorna Object&lt;/span&gt;

&lt;span class='c1'&gt;// validarCPF irá herdar propriedades de Function&lt;/span&gt;
&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;validarCPF&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='c1'&gt;// aqui vemos uma função se comportando como um objeto&lt;/span&gt;
&lt;span class='nx'&gt;validarCPF&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;call&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// método herdado de Function&lt;/span&gt;
&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getPrototypeOf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;validarCPF&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// retorna function Empty() {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;É interessante notar que a herança ocorre em &lt;strong&gt;toda&lt;/strong&gt; a cadeia de protótipos. Como quando definimos um array: ele herda todas as propriedades de Array e de Object, uma vez que Array usa Object como protótipo. Podemos verificar isso chamando o protótipo do protótipo de frutas. O protótipo de frutas é Array, e o protótipo de Array é Object ou, o protótipo do protótipo de frutas é Object.&lt;/p&gt;

&lt;p&gt;Quando chamamos a propriedade de um objeto, o interpretador/VM JavaScript primeiro procura esta propriedade dentro do objeto, caso não encontre procura em seu protótipo, caso não encontre novamente procura no protótipo do protótipo, e assim sucessivamente, percorrendo toda a cadeia de protótipos até alcançar um protótipo com valor &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='herana_em_javascript_com_construtores'&gt;Herança em JavaScript com construtores&lt;/h2&gt;

&lt;p&gt;O método mais difundido e crossbrowser de criação de objetos e herança em JavaScript é através de funções que funcionam como construtores. Nesse método, definimos funções que irão se comportar como construtores em linguagens clássicas orientadas a objeto. Depois de definida a função, podemos instanciar objetos do tipo definido usando &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Em JavaScript, uma função também é um objeto, e ela possui a propriedade &lt;code&gt;prototype&lt;/code&gt;. Nesta propriedade definimos o prototipo da função, ou todas as propriedades que os objetos deste tipo irão ter se invocarmos &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, pode parecer complicado falando, mas fica bem fácil olhando o código.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// criamos o construtor Animal&lt;/span&gt;
&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;Animal&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;Animal&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;nascer&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;Animal&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;morrer&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;Animal&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;respirar&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora definimos Gato e Cachorro, e usamos Animal como protótipo.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// criamos o construtor Gato&lt;/span&gt;
&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;Gato&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;nome&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;nome&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;nome&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;Gato&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Animal&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// definimos que Gato usa Animal como protótipo&lt;/span&gt;
&lt;span class='nx'&gt;Gato&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;constructor&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Gato&lt;/span&gt; &lt;span class='c1'&gt;// para que não fique com o valor do construtor do objeto usado como protótipo&lt;/span&gt;
&lt;span class='nx'&gt;Gato&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;miar&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='c1'&gt;// método miar apenas para Gato&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='c1'&gt;// criamos o construtor Cachorro&lt;/span&gt;
&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;nome&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;nome&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;nome&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Animal&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// definimos que Cachorro usa Animal como protótipo&lt;/span&gt;
&lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;constructor&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;latir&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;rex&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;rex&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// criamos um objeto do tipo Cachorro&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;latir&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// utilizando um método definido em Cachorro&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;respirar&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// utilizando um método herdado de Animal&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;nome&lt;/span&gt; &lt;span class='c1'&gt;// retorna &amp;#39;rex&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Precisamos criar um novo objeto do tipo Animal para setarmos como protótipo, pois caso contrário estariamos passando a referência para a função.&lt;/p&gt;

&lt;p&gt;A propriedade &lt;code&gt;constructor&lt;/code&gt; nos informa o construtor do objeto. Nós precisamos defini-la manualmente pois esta proprieda existe no objeto Animal que passamos por protótipo, então todos os objetos de Cachorro e Gato irão herdar a propriedade construtor com o setado valor como Animal. Esta propriedade pode ser útil caso seja preciso chamar um método de um dos objetos na cadeia de protótipos.&lt;/p&gt;

&lt;p&gt;Podemos verificar que rex é de fato um cachorro perguntado se ele é uma instância de Cachorro.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;rex&lt;/span&gt; &lt;span class='k'&gt;instanceof&lt;/span&gt; &lt;span class='nx'&gt;Cachorro&lt;/span&gt; &lt;span class='c1'&gt;// retorna true&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt; &lt;span class='k'&gt;instanceof&lt;/span&gt; &lt;span class='nx'&gt;Animal&lt;/span&gt; &lt;span class='c1'&gt;// retorn true. Cachorro.prototype --&amp;gt; Animal&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt; &lt;span class='k'&gt;instanceof&lt;/span&gt; &lt;span class='nb'&gt;Object&lt;/span&gt; &lt;span class='c1'&gt;// retorna true. Cachorro.prototype --&amp;gt; Animal.prototype --&amp;gt; Object&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt; &lt;span class='k'&gt;instanceof&lt;/span&gt; &lt;span class='nb'&gt;Array&lt;/span&gt; &lt;span class='c1'&gt;// retorna false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Interessante notar que rex também é uma instância de Animal, já que Cachorro usa Animal como protótipo. E também é instância de Object, já que Animal usa, implicitamente, Object como protótipo.&lt;/p&gt;

&lt;p&gt;Por ser uma linguagem orientada a protótipos, nós podemos definir um novo ao método ao protótipo e todos os objetos já instanciados irão ter acesso a este método criado, o que é impossível de ser feito em linguagens como Java (me corrijam se estiver falando besteira).&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;Cachorro&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;morder&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;rex&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;morder&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='c1'&gt;// rex mesmo depois de instanciado terá acesso aos novos métodos definidos no protótipo de Cachorro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Um dos perigos dessa abordagem é que caso se esqueça de usar &lt;code&gt;new&lt;/code&gt;, o &lt;code&gt;this&lt;/code&gt; dentro da &lt;code&gt;function&lt;/code&gt; irá se referenciar ao objeto global, e poderá sobreescrever algumas variáveis já declaradas antes.&lt;/p&gt;

&lt;p&gt;Eu particularmente não sou a favor do uso do &lt;code&gt;new&lt;/code&gt; pois ele torna ambíguo o uso de funções. Pois algumas funcionam como construtores e outras como funções normais. E sintaticamente o &lt;code&gt;new&lt;/code&gt; pode ser usado em qualquer tipo de função.&lt;/p&gt;

&lt;h3 id='continua'&gt;Continua&amp;#8230;&lt;/h3&gt;

&lt;p&gt;Este é o método padrão de herança em JavaScript. Grande parte desta bagunça é devido ao JavaScript ter sido lançado &lt;strong&gt;muito&lt;/strong&gt; às pressas. Porém o ECMAscript, o grupo que padroniza o JavaScript, vem adicionado várias funções para tornar o trabalho com herança mais simples e finalmente abraçando a orientação a protótipo.&lt;/p&gt;

&lt;p&gt;E é sobre este novo método de trabalhar com herança no ECMAscript 5 que iremos discutir na 2ª parte do post.&lt;/p&gt;
&lt;aside class='fonte'&gt;
  &lt;h3&gt;Referência&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href='https://developer.mozilla.org/en/JavaScript/Guide/Inheritance_and_the_prototype_chain'&gt;
        Mozilla Developer Network: Inheritance and the Prototype Chain
      &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href='http://stackoverflow.com/questions/2709612/using-object-create-instead-of-new'&gt;StackOverflow: Using Object.create() instead of new&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href='http://joost.zeekat.nl/constructors-considered-mildly-confusing.html'&gt;code.h(oe)kje: Constructors considered mildly confusing&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/05/02/microdata</id>
    <title>Microdata</title>
    <updated>2012-05-02T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/05/02/microdata/" />
    <author>
      <name>Almir Filho</name>
    </author>
    <content type="html">&lt;style type='text/css'&gt;
	
	circle {
		-webkit-transition: fill 0.5s ease;
		-khtml-transition: fill 0.5s ease;
		-moz-transition: fill 0.5s ease;
		-ms-transition: fill 0.5s ease;
		-o-transition: fill 0.5s ease;
		transition: fill 0.5s ease;
	}

	g.circle:hover circle {
		fill: #ccc;
	}

	#exemplo-filme {
		border: 1px solid #ccc;
		padding: 20px;
		-webkit-box-shadow: 2px 3px 0px #ccc;
		-khtml-box-shadow: 2px 3px 0px #ccc;
		-moz-box-shadow: 2px 3px 0px #ccc;
		-ms-box-shadow: 2px 3px 0px #ccc;
		-o-box-shadow: 2px 3px 0px #ccc;
		box-shadow: 2px 3px 0px #ccc;
		font-family: &quot;Georgia&quot;, serif;
		color: #333;
		background-color: #f5f5f5;
	}

		#exemplo-filme h4 {
			font-size: 18px !important;
		}

		#exemplo-filme p {
			margin: 0px !important;
		}

&lt;/style&gt;&lt;p&gt;&lt;img alt='HTML5 Semantics' height='432' src='http://loopinfinito.com.br/images/posts/2012-05-02-semantics-html5.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Olá pessoal, continuando o papo do nosso &lt;a href='http://loopinfinito.com.br/2012/04/26/marcacao-semantica/'&gt;último post&lt;/a&gt;, hoje continuarei falando de marcação semântica, com a diferença de que focarei em microdata e mostrarei também como realizar a marcação semântica de conteúdo usando os vocabulários &lt;strong&gt;Schema.org&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id='vocabulrios_do_schemaorg'&gt;Vocabulários do schema.org&lt;/h2&gt;

&lt;p&gt;No site &lt;a href='http://schema.org'&gt;schema.org&lt;/a&gt; podemos encontrar a lista completa de todos os tipos de &lt;em&gt;esquemas&lt;/em&gt; (entidades) que já foram definidas. No momento em que escrevo este post, já encontram-se por volta de 450 entidades no site.&lt;/p&gt;

&lt;p&gt;É importante observar que os vocabulários schema.org pertencem a uma &lt;strong&gt;hierarquia&lt;/strong&gt;, exatamente como se fosse uma hierarquia de classes da nossa velha e conhecida orientação a objeto, em que cada classe pode estender outra classe, &lt;strong&gt;herdando&lt;/strong&gt; assim todas as &lt;strong&gt;propriedades&lt;/strong&gt; e comportamentos da classe pai. No schema.org temos apenas 2 tipos básicos de entidades: &lt;strong&gt;DataType&lt;/strong&gt; e &lt;strong&gt;Thing&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id='datatype'&gt;DataType&lt;/h3&gt;

&lt;p&gt;Apenas define vários tipos de dados primitivos que servem para descrever os tipos de dados que serão usados para preencher um atributo qualquer em qualquer vocabulário. As entidades &lt;em&gt;Boolean&lt;/em&gt;, &lt;em&gt;Date&lt;/em&gt;, &lt;em&gt;Number&lt;/em&gt; e &lt;em&gt;Text&lt;/em&gt; estendem &lt;strong&gt;DataType&lt;/strong&gt;, e &lt;em&gt;Float&lt;/em&gt; e &lt;em&gt;Integer&lt;/em&gt; por sua vez, estendem &lt;em&gt;Number&lt;/em&gt;. Até hoje não vi nenhuma aplicação que utiliza estes vocabulários para definir dados &lt;em&gt;semanticamente&lt;/em&gt;. Por exemplo, digamos que exista uma entidade &lt;em&gt;Empresa&lt;/em&gt; a qual queremos especificar o número de funcionários. Para isto, não usaremos Integer, e sim uma propriedade &lt;em&gt;numeroDeFuncionarios&lt;/em&gt; (que é do tipo &lt;em&gt;Integer&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Então resumindo, nós não precisamos nos preocupar com estes tipos de dados para marcar código semanticamente.&lt;/p&gt;

&lt;h3 id='thing'&gt;Thing&lt;/h3&gt;

&lt;p&gt;É aqui que a coisa começa a ficar interessante. &lt;strong&gt;Thing&lt;/strong&gt; é a entidade mais abstrata a nível semântico. Como o próprio nome já nos diz, &lt;em&gt;Thing&lt;/em&gt; é qualquer coisa, é o nosso &lt;em&gt;Object&lt;/em&gt; em Java (alô, JavaLovers). A partir de Thing, qualquer coisa pode ser definida. As 7 entidades que a estendem são: &lt;strong&gt;CreativeWork&lt;/strong&gt;, &lt;strong&gt;Event&lt;/strong&gt;, &lt;strong&gt;Intangible&lt;/strong&gt;, &lt;strong&gt;Organization&lt;/strong&gt;, &lt;strong&gt;Person&lt;/strong&gt;, &lt;strong&gt;Place&lt;/strong&gt; e &lt;strong&gt;Product&lt;/strong&gt;. Dentro de &lt;em&gt;CreativeWork&lt;/em&gt; temos &lt;em&gt;Article&lt;/em&gt;, &lt;em&gt;Blog&lt;/em&gt;, &lt;em&gt;Movie&lt;/em&gt;, &lt;em&gt;Recipe&lt;/em&gt; e por ai vai.&lt;/p&gt;
&lt;svg class='img' height='400' width='700'&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='391.774' x2='391.774' y1='224.031' y2='249.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='231.773' x2='231.773' y1='224.031' y2='249.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='311.773' x2='311.773' y1='224.031' y2='249.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='471.774' x2='471.774' y1='224.031' y2='249.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='551.774' x2='551.774' y1='224.031' y2='249.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='631.774' x2='631.774' y1='224.031' y2='249.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='243.773' x2='243.773' y1='341.031' y2='366.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='181.773' x2='181.773' y1='341.031' y2='366.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='120.773' x2='120.773' y1='341.031' y2='366.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='58.773' x2='58.773' y1='341.031' y2='366.629' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='151.92' x2='121.258' y1='198.706' y2='321.607' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='151.773' x2='60.227' y1='194.608' y2='321.607' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='151.92' x2='182.29' y1='198.706' y2='321.607' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='151.773' x2='243.433' y1='194.608' y2='324.734' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='388.433' x2='311.773' y1='62.209' y2='184.161' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='388.433' x2='231.773' y1='62.209' y2='184.161' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='388.433' x2='151.773' y1='62.209' y2='184.161' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='391.92' x2='631.774' y1='62.209' y2='184.161' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='391.92' x2='551.774' y1='62.209' y2='184.161' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='391.92' x2='471.774' y1='62.209' y2='184.161' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='391.774' x2='391.774' y1='76.031' y2='184.161' /&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='391.774' cy='56.112' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='18' transform='matrix(1 0 0 1 369.4121 62.209)'&gt;Thing&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='391.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='10' transform='matrix(1 0 0 1 363.3008 198.7051)'&gt;Organization&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='311.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 285.2446 198.7051)'&gt;Intangible&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='231.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='14' transform='matrix(1 0 0 1 214.4136 198.7051)'&gt;Event&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='151.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='10' transform='matrix(1 0 0 1 121.9155 198.7051)'&gt;CreativeWork&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='631.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='14' transform='matrix(1 0 0 1 607.4136 198.7051)'&gt;Product&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='551.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='14' transform='matrix(1 0 0 1 534.4136 198.7051)'&gt;Place&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='471.774' cy='194.607' fill='#EEEEEE' r='33.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='14' transform='matrix(1 0 0 1 450.1372 198.7051)'&gt;Person&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='121.258' cy='321.607' fill='#EEEEEE' r='25.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 109.0342 324.7339)'&gt;Blog&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='60.227' cy='321.607' fill='#EEEEEE' r='25.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 43.335 324.7339)'&gt;Article&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='182.29' cy='321.607' fill='#EEEEEE' r='25.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 166.3994 324.7339)'&gt;Movie&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='243.321' cy='321.607' fill='#EEEEEE' r='25.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 224.4248 324.7339)'&gt;Recipe&lt;/text&gt;
	&lt;/g&gt;
	&lt;path d='M405.766,255.279c0,2.954-2.395,5.35-5.35,5.35h-17.539
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.539c2.955,0,5.35,2.396,5.35,5.351V255.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='383.77' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='399.375' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='391.573' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M245.767,255.279c0,2.954-2.396,5.35-5.351,5.35h-17.538
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.538c2.955,0,5.351,2.396,5.351,5.351V255.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='223.77' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='239.376' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='231.573' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M325.767,255.279c0,2.954-2.396,5.35-5.351,5.35h-17.538
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.538c2.955,0,5.351,2.396,5.351,5.351V255.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='303.77' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='319.376' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='311.573' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M485.766,255.279c0,2.954-2.395,5.35-5.35,5.35h-17.539
		c-2.955,0-5.35-2.396-5.35-5.35v-0.298c0-2.955,2.395-5.351,5.35-5.351h17.539c2.955,0,5.35,2.396,5.35,5.351V255.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='463.77' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='479.375' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='471.573' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M565.766,255.279c0,2.954-2.395,5.35-5.35,5.35h-17.539
		c-2.955,0-5.35-2.396-5.35-5.35v-0.298c0-2.955,2.395-5.351,5.35-5.351h17.539c2.955,0,5.35,2.396,5.35,5.351V255.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='543.77' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='559.375' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='551.573' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M645.766,255.279c0,2.954-2.395,5.35-5.35,5.35h-17.539
		c-2.955,0-5.35-2.396-5.35-5.35v-0.298c0-2.955,2.395-5.351,5.35-5.351h17.539c2.955,0,5.35,2.396,5.35,5.351V255.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='623.77' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='639.375' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='631.573' cy='255.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M257.767,372.279c0,2.954-2.396,5.35-5.351,5.35h-17.538
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.538c2.955,0,5.351,2.396,5.351,5.351V372.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='235.77' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='251.376' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='243.573' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M195.767,372.279c0,2.954-2.396,5.35-5.351,5.35h-17.538
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.538c2.955,0,5.351,2.396,5.351,5.351V372.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='173.77' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='189.376' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='181.573' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M134.767,372.279c0,2.954-2.396,5.35-5.351,5.35h-17.538
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.538c2.955,0,5.351,2.396,5.351,5.351V372.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='112.77' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='128.376' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='120.573' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;path d='M72.767,372.279c0,2.954-2.396,5.35-5.351,5.35H49.878
		c-2.955,0-5.351-2.396-5.351-5.35v-0.298c0-2.955,2.396-5.351,5.351-5.351h17.538c2.955,0,5.351,2.396,5.351,5.351V372.279z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
	&lt;circle cx='50.77' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='66.376' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='58.573' cy='372.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='285.77' cy='325.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='301.376' cy='325.129' fill='#CCCCCC' r='1.871' /&gt;
	&lt;circle cx='293.573' cy='325.129' fill='#CCCCCC' r='1.871' /&gt;
&lt;/svg&gt;
&lt;h2 id='identificando_as_entidades'&gt;Identificando as entidades&lt;/h2&gt;

&lt;p&gt;Antes de querermos marcar conteúdo semanticamente, é necessário identificar as entidades presentes na página que desejamos descrever. Digamos que temos uma página que apresenta informações sobre filmes, e em um trecho tenhamos:&lt;/p&gt;
&lt;div id='exemplo-filme'&gt;
	&lt;h4&gt;Avatar&lt;/h4&gt;
	&lt;p&gt;Diretor: James Cameron (16 de agosto de 1954)&lt;/p&gt;
	&lt;p&gt;Ficção Científica&lt;/p&gt;
	&lt;p&gt;&lt;a href='http://www.youtube.com/watch?v=d1_JBMrrYw8'&gt;Veja o trailer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Para nós é muito fácil identificar qual entidade de que se tratam as informações acima, &lt;strong&gt;mas e as máquinas&lt;/strong&gt;? Como elas saberão que &amp;#8220;James Cameron&amp;#8221; é o diretor do filme Avatar? Esta palavra &amp;#8220;Diretor&amp;#8221; também não tem o menor significado para uma máquina. E se &amp;#8220;Diretor&amp;#8221; estivesse em japonês ou em russo? &lt;strong&gt;Como elas saberiam dizer sequer o que é &amp;#8220;Avatar&amp;#8221;?&lt;/strong&gt; Seria Avatar, o &lt;strong&gt;desenho&lt;/strong&gt;, o &lt;strong&gt;filme&lt;/strong&gt;, ou até mesmo uma &lt;strong&gt;entidade divina&lt;/strong&gt; do mundo espiritual encarnada em uma pessoa? Quando você procura por Avatar no Google, como ele sabe pelo que você está procurando exatamente? Ele &lt;strong&gt;não sabe&lt;/strong&gt;. O que o Google e os outros motores de busca atuais fazem é aplicar um monte de algoritmos super complexos que fazem uma porrada de associações pra tentar &lt;strong&gt;adivinhar&lt;/strong&gt; do que seu conteúdo se trata (&lt;em&gt;n&lt;/em&gt; teses de doutorado e muita matemática por trás), e assim poder melhorar sua indexação e classificação de conteúdo.&lt;/p&gt;

&lt;h2 id='propriedades_microdata'&gt;Propriedades microdata&lt;/h2&gt;

&lt;p&gt;Como vimos, os vocabulários schema.org definem entidades do mundo real, suas propriedades e seus relacionamentos com outras entidades. Agora vamos ver como utilizar de fato todos estes metadados em nosso código HTML. Primeiro certifique-se de que seu cabeçalho tenha a definição &lt;em&gt;doctype&lt;/em&gt; correta, sendo microdata um padrão HTML5, a primeira linha do seu código deve ser &lt;code&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt;, apenas isso – sem nomes complicados de versões e/ou urls que ninguém tem paciência de ficar escrevendo.&lt;/p&gt;

&lt;p&gt;Feito isto, vamos finalmente ao microdata de fato. Microdata define 5 diferentes atributos que podem ser adicionados a qualquer elemento HTML o qual você queira descrever semanticamente. Estes atributos são:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;itemscope&lt;/code&gt;: Indica que o item é uma entidade semântica e que todas as propriedades que estiverem dentro dele contêm informações sobre ele;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;itemtype&lt;/code&gt;: Indica a entidade (o tipo). Aqui você deve especificar a URL do vocabulário (por exemplo: http://schema.org/CreativeWork);&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;itemid&lt;/code&gt;: Um identificador único para o item (leia &lt;code&gt;itemref&lt;/code&gt;);&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;itemprop&lt;/code&gt;: Indica que o item possui o valor da propriedade especificada (veja o exemplo abaixo);&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;itemref&lt;/code&gt;: Propriedades que estão em elementos fora do escopo (elemento com &lt;code&gt;itemscope&lt;/code&gt;) podem ser associadas a este item. &lt;code&gt;itemref&lt;/code&gt; deve conter seu valor preenchido com o &lt;code&gt;itemid&lt;/code&gt; do elemento o qual se deseja fazer a associação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora vamos voltar ao exemplo do Avatar. Digamos que o código HTML correspondente &lt;a href='#exemplo-filme'&gt;àquele trecho&lt;/a&gt; seja: (Este tutorial é basicamente o mesmo encontrado no &lt;a href='http://schema.org/docs/gs.html'&gt;getting started&lt;/a&gt; do site schema.org.)&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Avatar&lt;span class='nt'&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Diretor: James Cameron (16 de agosto de 1954)&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Ficção Científica&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://www.youtube.com/...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Veja o trailer&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Começamos definindo a entidade Movie e adicionando as propriedades &lt;code&gt;itemscope&lt;/code&gt; e &lt;code&gt;itemtype&lt;/code&gt; ao elemento &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, já que este elemento possui todo conteúdo relacionado ao filme &lt;em&gt;Avatar&lt;/em&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='c'&gt;&amp;lt;!-- adicionamos os atributos itemscope e itemtype --&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/Movie&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Avatar&lt;span class='nt'&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Diretor: James Cameron (16 de agosto de 1954)&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Ficção Científica&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://www.youtube.com/...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Veja o trailer&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora identificamos as propriedades presentes deste filme e definimos cada uma com o atributo &lt;code&gt;itemprop&lt;/code&gt;, no nosso caso estas propriedades são &lt;em&gt;nome&lt;/em&gt;, &lt;em&gt;diretor&lt;/em&gt;, &lt;em&gt;gênero&lt;/em&gt; e &lt;em&gt;trailer&lt;/em&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/Movie&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- adicionamos o atributo itemprop ao nome do filme --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;h4&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Avatar&lt;span class='nt'&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- adicionamos o atributo itemprop ao diretor do filme --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        Diretor: 
        &lt;span class='nt'&gt;&amp;lt;span&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;director&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;James Cameron (16 de agosto de 1954)&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- adicionamos o atributo itemprop ao gênero do filme --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Ficção Científica&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- adicionamos o atributo itemprop ao trailer do filme --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;trailer&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://www.youtube.com/...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Veja o trailer&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Temos um Filme cujo nome é Avatar, gênero é Ficção científica, trailer aponta para uma URL e o diretor é James Cameron. Numa representação gráfica da semântica deste trecho de código, teríamos algo parecido como:&lt;/p&gt;
&lt;svg class='img' height='400' width='700'&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='350' x2='350' y1='57.031' y2='344.36' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='504.665' x2='197.336' y1='211.696' y2='211.696' /&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='350.774' cy='209.112' fill='#EEEEEE' r='60.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='32.4044' transform='matrix(1 0 0 1 310.3311 220.0874)'&gt;Movie&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M391.055,45.031c0,6.627-5.373,12-12,12h-56
			c-6.627,0-12-5.373-12-12V37.36c0-6.627,5.373-12,12-12h56c6.627,0,12,5.373,12,12V45.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 320.6929 48.0874)'&gt;Avatar&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M445.055,363.031c0,6.628-5.373,12-12,12h-166
			c-6.627,0-12-5.372-12-12v-7.671c0-6.627,5.373-12,12-12h166c6.627,0,12,5.373,12,12V363.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 274.0205 366.0874)'&gt;James Cameron&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M564.055,215.031c0,6.628-3.989,12-8.909,12h-41.572
			c-4.92,0-8.909-5.372-8.909-12v-7.671c0-6.627,3.989-12,8.909-12h41.572c4.92,0,8.909,5.373,8.909,12V215.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 513.6157 218.0874)'&gt;URL&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M198.055,228.031c0,6.628-5.373,12-12,12h-81
			c-6.627,0-12-5.372-12-12V193.36c0-6.627,5.373-12,12-12h81c6.627,0,12,5.373,12,12V228.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text transform='matrix(1 0 0 1 114.5166 205.0874)'&gt;&lt;tspan font-size='21' x='0' y='0'&gt;Ficção&lt;/tspan&gt;&lt;tspan font-size='21' x='-10.5' y='25.2'&gt;científica&lt;/tspan&gt;&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M371.722,104.273c0,3.59-2.91,6.5-6.5,6.5h-30.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h30.334c3.59,0,6.5,2.91,6.5,6.5V104.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 335.0493 106.3599)'&gt;name&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M374.722,308.273c0,3.59-2.91,6.5-6.5,6.5h-36.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h36.334c3.59,0,6.5,2.91,6.5,6.5V308.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 330.7212 310.3599)'&gt;director&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M479.722,213.273c0,3.59-2.91,6.5-6.5,6.5h-30.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h30.334c3.59,0,6.5,2.91,6.5,6.5V213.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 443.0552 215.3599)'&gt;trailer&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M268.056,213.273c0,3.59-3.224,6.5-7.2,6.5h-33.601c-3.977,0-7.2-2.91-7.2-6.5v-4.155
			c0-3.59,3.224-6.5,7.2-6.5h33.601c3.977,0,7.2,2.91,7.2,6.5V213.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 225.0474 215.3599)'&gt;gender&lt;/text&gt;
	&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;Se for do nosso interesse, podemos refinar mais ainda a nossa marcação tentando identificar se uma destas propriedades pode ser definida como uma outra entidade. No caso da propriedade &lt;code&gt;director&lt;/code&gt; por exemplo, um diretor é uma &lt;strong&gt;pessoa&lt;/strong&gt; também, então vamos aplicar o vocabulário &lt;strong&gt;Person&lt;/strong&gt; do schema.org:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/Movie&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;h4&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Avatar&lt;span class='nt'&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- movemos o atributo itemprop do diretor para o wrapper (&amp;lt;p&amp;gt;) --&amp;gt;&lt;/span&gt;
    &lt;span class='c'&gt;&amp;lt;!-- e adicionamos os atributos itemscope e itemtype ao diretor --&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;director&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/Person&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
        Diretor: 
        &lt;span class='nt'&gt;&amp;lt;span&amp;gt;&lt;/span&gt;James Cameron (16 de agosto de 1954)&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Ficção Científica&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;trailer&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://www.youtube.com/...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Veja o trailer&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;E para terminar, vamos especificar as propriedades desta pessoa – que no nesta caso são &lt;em&gt;nome&lt;/em&gt; e &lt;em&gt;data de nascimento&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Observe que para data de nascimento criamos um novo elemento &lt;code&gt;&amp;lt;time datetime=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;. Optei por fazer isto por quê &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; é uma &lt;a href='http://www.w3schools.com/html5/tag_time.asp'&gt;nova tag&lt;/a&gt; que faz parte da especificação HTML5, e usamos seu atributo &lt;code&gt;datetime&lt;/code&gt; para especificar o formato padrão de data usado pelo schema.org – na especificação do tipo de dados &lt;a href='http://schema.org/Date'&gt;Date&lt;/a&gt;, o formato de data esperado é o &lt;a href='http://en.wikipedia.org/wiki/ISO_8601'&gt;ISO 8601&lt;/a&gt; (AAAA-MM-DD).&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/Movie&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;h4&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Avatar&lt;span class='nt'&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;director&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemscope=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;itemscope&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;itemtype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://schema.org/Person&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
        Diretor: 
        &lt;span class='c'&gt;&amp;lt;!-- adicionamos o atributo itemprop às seguintes propriedades da pessoa --&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;span&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;James Cameron&lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
        &lt;span class='nt'&gt;&amp;lt;time&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;birthDate&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;datetime=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;1954-08-16&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
            (16 de agosto de 1954)
        &lt;span class='nt'&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Ficção Científica&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;itemprop=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;trailer&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://www.youtube.com/...&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Veja o trailer&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Agora temos um &lt;strong&gt;Filme&lt;/strong&gt; cujo nome é Avatar, gênero é Ficção científica, trailer aponta para uma URL e o diretor é uma &lt;strong&gt;Pessoa&lt;/strong&gt; cujo nome é James Cameron e sua data de nascimento é 16 de agosto de 1954. Com isso, uma representação gráfica da semântica passaria a ser algo como:&lt;/p&gt;
&lt;svg class='img' height='550' width='700'&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='350' x2='350' y1='57.031' y2='344.36' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='504.665' x2='197.336' y1='211.696' y2='211.696' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='350' x2='201.038' y1='391.26' y2='516.196' /&gt;
	&lt;line fill='none' stroke='#CCCCCC' stroke-miterlimit='10' x1='350' x2='504.665' y1='391.26' y2='516.196' /&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='350.774' cy='209.112' fill='#EEEEEE' r='60.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='32.4044' transform='matrix(1 0 0 1 310.3311 220.0874)'&gt;Movie&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M391.055,45.031c0,6.627-5.373,12-12,12h-56
			c-6.627,0-12-5.373-12-12V37.36c0-6.627,5.373-12,12-12h56c6.627,0,12,5.373,12,12V45.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 320.6929 48.0874)'&gt;Avatar&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
	&lt;path d='M295.055,520.031c0,6.628-5.373,12-12,12h-166
		c-6.627,0-12-5.372-12-12v-7.671c0-6.627,5.373-12,12-12h166c6.627,0,12,5.373,12,12V520.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 124.0205 523.0874)'&gt;James Cameron&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M564.055,215.031c0,6.628-3.989,12-8.909,12h-41.572
			c-4.92,0-8.909-5.372-8.909-12v-7.671c0-6.627,3.989-12,8.909-12h41.572c4.92,0,8.909,5.373,8.909,12V215.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 513.6157 218.0874)'&gt;URL&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M198.055,228.031c0,6.628-5.373,12-12,12h-81
			c-6.627,0-12-5.372-12-12V193.36c0-6.627,5.373-12,12-12h81c6.627,0,12,5.373,12,12V228.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text transform='matrix(1 0 0 1 114.5166 205.0874)'&gt;&lt;tspan font-size='21' x='0' y='0'&gt;Ficção&lt;/tspan&gt;&lt;tspan font-size='21' x='-10.5' y='25.2'&gt;científica&lt;/tspan&gt;&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M371.722,104.273c0,3.59-2.91,6.5-6.5,6.5h-30.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h30.334c3.59,0,6.5,2.91,6.5,6.5V104.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 335.0493 106.3599)'&gt;name&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M374.722,308.273c0,3.59-2.91,6.5-6.5,6.5h-36.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h36.334c3.59,0,6.5,2.91,6.5,6.5V308.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 330.7212 310.3599)'&gt;director&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M479.722,213.273c0,3.59-2.91,6.5-6.5,6.5h-30.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h30.334c3.59,0,6.5,2.91,6.5,6.5V213.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 443.0552 215.3599)'&gt;trailer&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M268.056,213.273c0,3.59-3.224,6.5-7.2,6.5h-33.601c-3.977,0-7.2-2.91-7.2-6.5v-4.155
			c0-3.59,3.224-6.5,7.2-6.5h33.601c3.977,0,7.2,2.91,7.2,6.5V213.273z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 225.0474 215.3599)'&gt;genre&lt;/text&gt;
	&lt;/g&gt;
	&lt;g class='circle'&gt;
		&lt;circle cx='350.774' cy='391.261' fill='#EEEEEE' r='47.74' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='21' transform='matrix(1 0 0 1 316.5522 399.8882)'&gt;Person&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M289.723,463.695c0,3.59-2.91,6.5-6.5,6.5h-30.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h30.334c3.59,0,6.5,2.91,6.5,6.5V463.695z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 253.0498 465.7817)'&gt;name&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M563.722,520.031c0,6.628-5.373,12-12,12h-86
			c-6.627,0-12-5.372-12-12v-7.671c0-6.627,5.373-12,12-12h86c6.627,0,12,5.373,12,12V520.031z' fill='#FFFFFF' stroke='#CCCCCC' stroke-miterlimit='10' /&gt;
		&lt;text font-size='16' transform='matrix(1 0 0 1 466.7925 521.0874)'&gt;1954-08-16&lt;/text&gt;
	&lt;/g&gt;
	&lt;g&gt;
		&lt;path d='M469.723,463.695c0,3.59-2.91,6.5-6.5,6.5h-50.334c-3.59,0-6.5-2.91-6.5-6.5v-4.155
			c0-3.59,2.91-6.5,6.5-6.5h50.334c3.59,0,6.5,2.91,6.5,6.5V463.695z' fill='#CCCCCC' /&gt;
		&lt;text font-size='12' transform='matrix(1 0 0 1 413.3833 465.7817)'&gt;birthDate&lt;/text&gt;
	&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;E não para por ai galera, você pode sair especificando qualquer coisa a adicional conforme achar necessário, mas acho isso aqui já é o necessário pra dar uma boa sacada na idéia né. Estou bastante satisfeito de ter finalmente terminado este post, pois além de tudo, minha dívida de Heinekens com &lt;a href='http://twitter.com/caio_gondim'&gt;Caio Gondim&lt;/a&gt; para de aumentar hoje (um dia explico essa história)!&lt;/p&gt;

&lt;p&gt;No próximo post irei realizar a marcação semântica aqui no Loop Infinito e mostrarei o que mudou. Até lá!&lt;/p&gt;
&lt;aside class='fonte'&gt;
	&lt;h3&gt;Referência&lt;/h3&gt;
	&lt;ul&gt;
		&lt;li&gt;→&lt;a href='http://en.wikipedia.org/wiki/Microdata_(HTML)'&gt;Microdata&lt;/a&gt; &lt;span class='comment'&gt;//wikipedia&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://schema.org'&gt;Schema.org&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://schema.org/docs/gs.html'&gt;Getting started&lt;/a&gt; &lt;span class='comment'&gt;//schema.org&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://desenvolvimentoparaweb.com/html/microdata-api-schema-org-significado-html/'&gt;Microdata API e Schema.org: dando significado ao HTML&lt;/a&gt; &lt;span class='comment'&gt;//dpw&lt;/span&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/04/26/marcacao-semantica</id>
    <title>Marcação Semântica</title>
    <updated>2012-04-26T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/04/26/marcacao-semantica/" />
    <author>
      <name>Almir Filho</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt='' height='432' src='http://loopinfinito.com.br/images/posts/2012-04-26-marcacao-semantica.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Uma das coisas mais importantes na web é ter visibilidade, mas mais importante ainda é conseguir isto de forma que seu conteúdo chegue ao público correto. Eu poderia começar a falar aqui de toda a bonita história da internet e de como tudo gradativamente está se tornando semântico na web, mas isto é assunto para o próximo post.&lt;/p&gt;

&lt;p&gt;Desde a década de 1990, a W3C tem apresentado maneiras para definição de conteúdo semântico, e de lá pra cá surgiram outras alternativas, mas devido a grande quantidade de informações, falarei apenas um pouco sobre cada uma delas: RDF, RDFa, Microformats e &lt;strong&gt;Microdata&lt;/strong&gt; ← focaremos neste último cara aqui.&lt;/p&gt;

&lt;p&gt;Vale salientar que os principais motores de busca já levam em consideração o uso de qualquer uma destas tecnologias citadas (pelo menos em parte).&lt;/p&gt;

&lt;h2 id='rdf_resource_description_framework'&gt;RDF (Resource Description Framework)&lt;/h2&gt;

&lt;p&gt;Criada pela W3C em 1999, é uma &lt;strong&gt;linguagem&lt;/strong&gt; baseada em XML que foi concebida com o intuito de representar informação na internet. RDF é um modelo similar aos conceitos de modelagem Entidade-Relacionamento. RDF é tão abrangente que é possível definir linguagens para definição de ontologias com ela. Na minha opinião, usar RDF para marcar páginas web semanticamente hoje em dia é a mesma coisa que querer usar uma bala de canhão pra matar uma formiga. Na prática, principalmente por ser uma outra linguagem, RDF é um mundo tão grande e diferente que se torna complexo querer definir qualquer relacionamento semântico nos ambientes web conhecidos de hoje.&lt;/p&gt;

&lt;h2 id='rdfa_rdf__in__attributes'&gt;RDFa (RDF – in – attributes)&lt;/h2&gt;

&lt;p&gt;O título fala por si só. RDFa é a marcação semântica sem a necessidade de utilização de novos elementos de marcação, sendo feita usando &lt;strong&gt;atributos&lt;/strong&gt; que podem ser embutidos em qualquer elemento. A grande vantagem que a difere de RDF é a possibilidade de marcação no próprio conteúdo (já que um RDF tem que residir em um arquivo separado – o que acaba com a duplicação de dados do RDF). Porém, RDFa foi desenvolvida como um conjunto de extensões de XHTML e obedecendo aos padrões XML, obrigando-nos a fazer uso de &lt;em&gt;namespaces&lt;/em&gt; para todo e qualquer escopo/atributo de item semântico que quisermos descrever, tornando assim a marcação semântica um tanto chata e trabalhosa.&lt;/p&gt;

&lt;h2 id='microformats'&gt;Microformats&lt;/h2&gt;

&lt;p&gt;Microformats não se trata de mais uma nova linguagem querendo abraçar o mundo. A idéia é resolver os problemas mais simples primeiro, &lt;strong&gt;adaptando-se aos padrões atuais&lt;/strong&gt; e fazer com que você passe a usar uma marcação semântica o mais rápido possível, já que é de fácil utilização. A proposta dos microformats é bem simples e &lt;strong&gt;muito bem difundida&lt;/strong&gt;. Dentre os formatos mais usados, estão o hCalendar (para publicação de eventos) e hCard (para pessoas, empresas e organizações em geral). &lt;a href='http://microformats.org/wiki/Main_Page#Specifications'&gt;Veja mais formatos definidos&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='microdata'&gt;Microdata&lt;/h2&gt;

&lt;p&gt;Foi criado pelo WHATWG (os caras do HTML5/WebApplications 1.0) e tornou-se o padrão de marcação semântica adotado pelo HTML5. Microdata utiliza-se de variados &lt;strong&gt;vocabulários&lt;/strong&gt; para descrever itens semanticamente e pares &lt;em&gt;key-value&lt;/em&gt; para atribuição de valores a suas propriedades.&lt;/p&gt;

&lt;p&gt;Ótimo, mas onde podemos encontrar esses tais vocabulários? Os primeiros vocabulários microdata foram definidos em 2010 e podem ser encontrados em &lt;a href='http://data-vocabulary.org/'&gt;data-vocabulary.org&lt;/a&gt;. Note que existem poucos vocabulários definidos (apenas 9), que são: &lt;em&gt;Event&lt;/em&gt;, &lt;em&gt;Organization&lt;/em&gt;, &lt;em&gt;Person&lt;/em&gt;, &lt;em&gt;Product&lt;/em&gt;, &lt;em&gt;Review&lt;/em&gt;, &lt;em&gt;Review-aggregate&lt;/em&gt;, &lt;em&gt;Breadcrumb&lt;/em&gt;, &lt;em&gt;Offer&lt;/em&gt; e &lt;em&gt;Offer-aggregate&lt;/em&gt;. Mas calma lá, o melhor do microdata ainda está por vir com o &lt;strong&gt;&lt;a href='http://schema.org'&gt;Schema.org&lt;/a&gt;&lt;/strong&gt;, um repositório de vocabulários microdata que cresce a cada dia.&lt;/p&gt;

&lt;h3 id='schemaorg'&gt;Schema.org&lt;/h3&gt;

&lt;p&gt;Os principais motores de busca se baseiam nos vocabulários do schema.org para melhor indexar, classificar e refinar seus resultados de busca, visto que o schema.org é na verdade um consórcio entre os grandes buscadores da web – Google, Bing e Yahoo! – para &amp;#8221;&lt;em&gt;criar e suportar um grupo de esquemas em comum para dados de marcação estruturados em páginas web&lt;/em&gt;&amp;#8221;. A iniciativa começou com um pequeno número de formatos (esquemas ou tipos), mas o objetivo a longo prazo é suportar uma ampla gama de formatos. No momento em que escrevo este post, já se encontram em torno de &lt;strong&gt;450 formatos&lt;/strong&gt; definidos no schema.org – &lt;a href='http://schema.org/docs/full.html'&gt;Lista completa&lt;/a&gt;. Existem desde os tipos mais básicos como pessoa (&lt;em&gt;Person&lt;/em&gt;), evento (&lt;em&gt;Event&lt;/em&gt;) ou organização (&lt;em&gt;Organization&lt;/em&gt;) até os mais específicos como dentista (&lt;em&gt;Dentist&lt;/em&gt;), parada de ônibus (&lt;em&gt;BusStop&lt;/em&gt;) e até mesmo templo hindu (&lt;em&gt;HinduTemple&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Beleza, mas por quê Microdata, e não o super-bombado RDF/RDFa? Abaixo coloquei uma pequena lista com as razões mais óbvias, que apenas traduzi deste post de &lt;a href='http://www.thedigitalshift.com/2012/02/roy-tennant-digital-libraries/why-microdata-not-rdf-will-power-the-semantic-web/'&gt;Roy Tennant&lt;/a&gt;, com o qual concordo plenamente e também recomendo a leitura.&lt;/p&gt;
&lt;span id='razoes-microdata'&gt; &lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Há um claro incentivo à utilização de microdata&lt;/strong&gt; – Ao contrário de RDF, há um claro incentivo hoje para utilizar microdata em suas páginas web. &lt;em&gt;As grandes armas estão por trás do microdata&lt;/em&gt;. Se você tivesse que nomear as maiores empresas da internet, é muito provável que o Google, Yahoo! e Microsoft estivessem nesta lista. Eles têm aparentemente ignorado RDF ​​e RDFa em favor do Schema.org.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Não há nenhuma razão clara para usar RDFa e não microdata&lt;/strong&gt; – O que RDFa se propõe a fazer que microdata não? Comentem por favor =)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;É simples&lt;/strong&gt; – Esta é a minha razão favorita. Sou um grande fã da &lt;strong&gt;simplicidade&lt;/strong&gt;, especialmente quando se consegue um resultado tão (ou quase tão) bem feito de como se fosse algo mais complexo.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Faz parte do padrão HTML5&lt;/strong&gt; (esta foi adicionada por mim =) - Aqui no Loop infinito nós encorajamos o uso dos padrões W3C, tanto que este blog já foi construído usando HTML5 e CSS3 desde o início.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='na_prtica'&gt;Na prática&lt;/h2&gt;

&lt;p&gt;Existem vários serviços do Google, por exemplo, que fazem filtragens mais específicas de conteúdo e que levam muito em consideração a marcação semântica. Dois bons exemplos são o &lt;strong&gt;&lt;a href='http://www.google.com.br/prdhp'&gt;Google Shopping&lt;/a&gt;&lt;/strong&gt; (busca de produtos à venda) e o &lt;strong&gt;&lt;a href='http://www.google.com/landing/recipes/'&gt;Google Recipes&lt;/a&gt;&lt;/strong&gt; (busca de receitas culinárias). É verdade que estes serviços conseguem recuperar também conteúdo não marcado semanticamente (a grande maioria), mas os que utilizam RDFa, microformats ou microdata têm chances muito maiores de serem os primeiros no pagerank.&lt;/p&gt;

&lt;p&gt;No &lt;strong&gt;Google Shopping&lt;/strong&gt;, fiz uma pesquisa simples por &amp;#8221;&lt;em&gt;jornalista&lt;/em&gt;&amp;#8221; e eis o resultado obtido:&lt;/p&gt;
&lt;p id='img-produtos'&gt;&lt;img class='bordered' height='502' src='http://loopinfinito.com.br/images/posts/2012-04-26-marcacao-semantica-google-shopping.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Pela imagem acima, é possível perceber que o nível de refinamento de uma pesquisa pode ser muito mais específico do que apenas procurar por palavras-chaves – como acontece normalmente hoje. Percebam que podemos especificar se procuramos por um produto novo ou não, a faixa de preço desejada e até a loja. Os seis primeiros resultados foram dos sites: Americanas.com, Submarino.com.br, Extra.com.br, CasasBahia.com.br, PontoFrio.com e Saraiva.com.br. Tive a curiosidade de analisar o código fonte de cada um deles, e eis que consegui detectar na base do olhômetro (se eu estiver errado sobre algum, por favor deixe um comentário):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Americanas.com&lt;/strong&gt; - &lt;em&gt;usa microformats&lt;/em&gt;;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Submarino.com.br&lt;/strong&gt; - não usa marcação semântica;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Extra.com.br&lt;/strong&gt; - &lt;em&gt;usa microformats&lt;/em&gt;;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;CasasBahia.com.br&lt;/strong&gt; - &lt;em&gt;usa microformats&lt;/em&gt;;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;PontoFrio.com&lt;/strong&gt; - &lt;em&gt;usa microformats&lt;/em&gt;;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Saraiva.com.br&lt;/strong&gt; - não usa marcação semântica.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No &lt;strong&gt;Google Recipes&lt;/strong&gt;, pesquisei por &amp;#8221;&lt;em&gt;cupcake&lt;/em&gt;&amp;#8221;:&lt;/p&gt;
&lt;p&gt;&lt;img class='bordered' height='386' src='http://loopinfinito.com.br/images/posts/2012-04-26-marcacao-semantica-google-recipes.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Novamente, reparem nos filtros disponíveis para receitas. Eles diferem dos de produtos (&lt;a href='#img-produtos'&gt;mostrados acima&lt;/a&gt;). Aqui é possível especificar o uso (ou não uso) de determinados ingredientes na receita (muito útil para quem tem alergia a certos alimentos, por exemplo), tempo de cozimento e até mesmo o valor calórico do que procuro. É outra história, meus amigos. Os três primeiros resultados foram dos sites: FoodNetwork.com, MarthaStewart.com e KraftRecipes.com. Analisando o código fontes das páginas, obtive que:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FoodNetwork.com&lt;/strong&gt; - &lt;em&gt;usa microformats&lt;/em&gt;;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;MarthaStewart.com&lt;/strong&gt; - &lt;em&gt;usa microformats&lt;/em&gt;;&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;KraftRecipes.com&lt;/strong&gt; - &lt;em&gt;usa RDFa&lt;/em&gt;;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='pondo_a_mo_na_massa'&gt;Pondo a mão na massa&lt;/h2&gt;

&lt;p&gt;Apesar de não ter detectado o uso de microdata/schema.org nos exemplos acima, nós optamos por esta forma de marcação para aplicar aqui no Loop Infinito pelas mesmas &lt;a href='#razoes-microdata'&gt;razões que citei anteriormente&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No &lt;a href='http://loopinfinito.com.br/2012/05/02/microdata/'&gt;próximo post&lt;/a&gt; falarei mais detalhadamente sobre &lt;strong&gt;microdata&lt;/strong&gt; e &lt;strong&gt;schema.org&lt;/strong&gt;, e também explicarei detalhadamente como marcamos conteúdo HTML usando os vocabulários do schema.org. Até a próxima! o/&lt;/p&gt;
&lt;aside class='fonte'&gt;
	&lt;h3&gt;Referência&lt;/h3&gt;
	&lt;ul&gt;
		&lt;li&gt;→&lt;a href='http://en.wikipedia.org/wiki/Resource_Description_Framework'&gt;RDF&lt;/a&gt; &lt;span class='comment'&gt;//wikipedia&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://en.wikipedia.org/wiki/RDFa'&gt;RDFa&lt;/a&gt; &lt;span class='comment'&gt;//wikipedia&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://microformats.org/about'&gt;Microformats&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://en.wikipedia.org/wiki/Microdata_(HTML)'&gt;Microdata&lt;/a&gt; &lt;span class='comment'&gt;//wikipedia&lt;/span&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://schema.org'&gt;Schema.org&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://www.thedigitalshift.com/2012/02/roy-tennant-digital-libraries/why-microdata-not-rdf-will-power-the-semantic-web/'&gt;Why Microdata, Not RDF, Will Power the Semantic Web&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/04/14/css-filters</id>
    <title>CSS Filters</title>
    <updated>2012-04-14T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/04/14/css-filters/" />
    <author>
      <name>Caio Gondim</name>
    </author>
    <content type="html">&lt;style&gt;

	#cssfilter-img-base:hover {
		-webkit-transition: all 1s linear;
	}

	#cssfilter-img-base:hover {
		-webkit-filter: saturate(4);
	}

&lt;/style&gt;&lt;p&gt;&lt;img alt='' height='432' src='http://loopinfinito.com.br/images/posts/2012-04-14-css-filters.jpg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;A Adobe, Apple e Opera estão &lt;a href='https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html'&gt;trabalhando juntas&lt;/a&gt; para trazer alguns efeitos no estilo Photoshop para o CSS. Esses efeitos, chamados de filtros, irão nos permitir modificar a renderização de qualquer elemento DOM, de um simples &lt;code&gt;p&lt;/code&gt;, até elementos mais complexos como &lt;code&gt;image&lt;/code&gt; ou &lt;code&gt;video&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alguns dos efeitos já definidos na especificação são &lt;code&gt;grayscale&lt;/code&gt;, &lt;code&gt;blur&lt;/code&gt;, &lt;code&gt;sepia&lt;/code&gt;, &lt;code&gt;saturate&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;brightness&lt;/code&gt;, &lt;code&gt;contrast&lt;/code&gt;, &lt;code&gt;hue-rotate&lt;/code&gt; e &lt;code&gt;invert&lt;/code&gt;. Aos familiarizados com Photoshop ou qualquer programa de edição de imagem, eles devem ser bastante auto-explicativos. Mas de qualquer forma, vamos explorar cada filtro, um a um.&lt;/p&gt;

&lt;p&gt;Em todos os exemplos, iremos usar a imagem abaixo como base. Para verificar se o seu navegador suporta o CSS Filter, apenas passe o mouse por cima da imagem. Se ela modificar (saturar), quer dizer que o seu navegador suporta e já está aplicando um filtro no evento hover desta imagem.&lt;/p&gt;
&lt;p&gt;&lt;img height='200' id='cssfilter-img-base' src='http://loopinfinito.com.br/images/posts/jeri.jpg' width='700' /&gt;&lt;/p&gt;
&lt;h2 id='grayscale'&gt;Grayscale&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-grayscale.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Com o filtro &lt;code&gt;grayscale&lt;/code&gt; nós indicamos o quão preto-e-branco queremos que o elemento fique, numa escala de 0 a 1 ou 0% 100%.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;grayscale&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='blur'&gt;Blur&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-blur.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Com o filtro &lt;code&gt;blur&lt;/code&gt; podemos embaçar um elemento. Algo parecido como ver uma foto sem óculos (eu imagino que seja assim). Os valores são definidos em pixels. Quanto maior o valor, mais embaçado o elemento.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;blur&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;3px&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='sepia'&gt;Sepia&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-sepia.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Este efeito é normamelmente usado em fotos, dando a elas um efeito de fotos antigas. Os valores do efeito vão de 0 a 1.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;sepia&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='saturate'&gt;Saturate&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-saturate.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Com o &lt;code&gt;saturate&lt;/code&gt; modificamos o canal saturação da cores do elemento. Quanto maior a saturação, mais vivas as cores estarão, e quanto menor a saturação, mais próximas do cinza elas estarão. Com o &lt;ceode&gt;saturate&lt;/ceode&gt; em 0, obtemos o mesmo resultado que o &lt;code&gt;grayscale&lt;/code&gt; em 100%&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;saturate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;4&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='opacity'&gt;Opacity&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-opacity.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Ok, esse é bastante fácil. Simplesmente mude a opacidade do elemento. Os valores vão de 0 a 1. 0 deixa o elemento invisível.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;opacity&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='brightness'&gt;Brightness&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-brightness.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;brightness&lt;/code&gt; altera o brilho do elemento. Os valores vão de 100% a 0%. Em 100%, com o brilho no máximo, o elemento fica totalmente branco.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;brightness&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;50&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='contrast'&gt;Contrast&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-contrast.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Também bastante óbvio. Aqui alteramos a saturação do elemento. O valor desse filtro pode ser expresso em unidades (0, 1, 3, 4, &amp;#8230;) ou em percentagem (0%, 100%, 1500%).&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;constrast&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='m'&gt;5&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='hue_rotate'&gt;Hue Rotate&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-hue-rotate.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Neste filtro podemos mover todas as cores do elemento em graus dentro da roda de cores. Com 0deg não iremos realizar nenhuma alteração, enquanto com 180deg iremos inverter todas as cores.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;hue&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;rotate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;180&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='invert'&gt;Invert&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-invert.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Com o &lt;code&gt;invert&lt;/code&gt; invertemos todas as cores. Na verdade a inversão completa acontece apenas se usarmos o valor 100%. Com 50% as cores estarão no meio caminho entre suas cores invertidas, o que significa que estarão com um tom de cinza. Os valores vão de 0% a 100%.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;invert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id='vrios_filtros'&gt;Vários filtros&lt;/h2&gt;
&lt;p&gt;&lt;img height='200' src='http://loopinfinito.com.br/images/posts/jeri-various.png' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;Também é possível o uso de vários filtros em conjunto, para obtermos um efeito mais único. Na imagem acima usamos &lt;code&gt;hue-rotate&lt;/code&gt; e &lt;code&gt;sepia&lt;/code&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;filter&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;hue&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;rotate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;60&lt;/span&gt;&lt;span class='n'&gt;deg&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;sepia&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='m'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Como podemos ver o CSS Filters vem adicionar ainda mais poder ao HTML5. E isto é só uma prévia do que há por vir, como os &lt;a href='http://www.youtube.com/watch?v=NZRqnohI3m4'&gt;CSS Shaders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No momento em que escrevo este post, os CSS Filters rodam no &lt;a href='http://tools.google.com/dlpage/chromesxs'&gt;Google Chrome Canary&lt;/a&gt;, &lt;a href='http://www.google.com/chrome/intl/en/eula_dev.html'&gt;Google Chrome dev channel&lt;/a&gt; e &lt;a href='http://nightly.webkit.org/'&gt;WebKit Nightly Build&lt;/a&gt;.&lt;/p&gt;
&lt;aside class='fonte'&gt;
	&lt;h3&gt;Referência&lt;/h3&gt;
	&lt;ul&gt;
		&lt;li&gt;→&lt;a href='http://net.tutsplus.com/tutorials/html-css-techniques/say-hello-to-css3-filters/'&gt;NetTuts&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://davidwalsh.name/css-filters'&gt;David Walsh&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='http://updates.html5rocks.com/2011/12/CSS-Filter-Effects-Landing-in-WebKit'&gt;HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;→&lt;a href='https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html'&gt;W3C&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/aside&gt;</content>
  </entry>
  
  <entry>
    <id>http://loopinfinito.com.br/2012/04/01/hello-web</id>
    <title>console.log(‘Hello Web!’)</title>
    <updated>2012-04-01T00:00:00-03:00</updated>
    <link href="http://loopinfinito.com.br/2012/04/01/hello-web/" />
    <author>
      <name>Caio Gondim</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img height='432' src='http://loopinfinito.com.br/images/posts/darth-vader-and-elvis.jpeg' width='700' /&gt;&lt;/p&gt;
&lt;p&gt;O Loop Infinito é uma idéia antiga minha &lt;a href='http://twitter.com/caio_gondim'&gt;(@caio_gondim)&lt;/a&gt; e de Almir Filho &lt;a href='http://twitter.com/almirfilho'&gt;(@almirfilho)&lt;/a&gt;, onde queríamos começar um blog pra postar todas as nossas &amp;#8220;descobertas&amp;#8221; e experimentos sobre desenvolvimento web. Anos se passaram desde essa idéia, e hoje, finalmente, a idéia vira realidade.&lt;/p&gt;

&lt;p&gt;Aqui no blog postaremos principalmente sobre desenvolvimento web, mas alguns outros tópicos como produtividade, interface de usuário e nerdices em geral podem surgir de forma mais esporádica.&lt;/p&gt;

&lt;p&gt;A meta do blog é: tornar-se o melhor blog sobre desenvolvimento web em língua portuguesa. Sim, ela é bastante ambiciosa, e nós sabemos que nunca iremos alcançá-la sozinhos, por isso que precisamos da sua contribuição.&lt;/p&gt;

&lt;h2 id='contribuindo'&gt;Contribuindo&lt;/h2&gt;

&lt;p&gt;O Loop Infinito é gerenciado como um projeto de software livre, tendo todo o código disponível no &lt;a href='https://github.com/loopinfinito/loopinfinito.com.br'&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para contribuir com um post, basta dar um fork no nosso projeto, escrever seu post e nos enviar um pull request. &lt;strong&gt;Like a Hacker&lt;/strong&gt;. Não há banco de dados e muito menos linguagem no back-end. Todo o código é estático e totalmente aberto.&lt;/p&gt;

&lt;p&gt;Então se você acha que tem algo a acrescentar para a comunidade de desenvolvimento web brasileira, por que não dar um fork agora no projeto, escrever o post e nos enviar um pull request?&lt;/p&gt;

&lt;h2 id='melhor_feito_que_perfeito'&gt;Melhor feito que perfeito&lt;/h2&gt;

&lt;p&gt;Um dos grandes motivos do blog ter demorado tanto tempo é essa busca pela perfeição, que estava atrasando o projeto indefinidamente, já que nunca estávamos satisfeitos com o design, a logo, as ferramentas usadas, etc.&lt;/p&gt;

&lt;p&gt;Mas então se percebe que a perfeição não é um objetivo, já que é impossível alcançá-la. Mas sim um compromisso diário em sempre caminhar em sua direção. E este é o nosso compromisso. Não em sermos os melhores no dia 1, mas sim em sermos melhores que ontem, todos os dias. E é assim que o blog será gerenciado, com iterações constantes e graduais.&lt;/p&gt;

&lt;p&gt;Então esperem coisas boas acontecerem por aqui. Sempre.&lt;/p&gt;

&lt;h2 id='atualizao'&gt;Atualização&lt;/h2&gt;

&lt;p&gt;Qualquer atualização no site iremos tuitar no &lt;a href='http://twitter.com/loopinfinito'&gt;@loopinfinito&lt;/a&gt;. E lá também postaremos notícias relacionadas ao mundo do desenvolvimento web.&lt;/p&gt;

&lt;p&gt;Um feed RSS também será implementado.&lt;/p&gt;
&lt;h2&gt;}&lt;/h2&gt;
&lt;p&gt;Estamos muito empolgados e satisfeitos com o projeto finalmente estando no ar (ou nas nuvens). Esperamos que gostem do conteúdo e mandem idéias para posts, comentem e, principalmente, nos mandem pull requests no &lt;a href='https://github.com/loopinfinito/loopinfinito.com.br'&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  
</feed>